package ru.builder.bean.statistic;

import org.telegram.telegrambots.meta.api.methods.ParseMode;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.builder.bean.firebase.Firebase;
import ru.builder.bot.BuilderBot;
import ru.builder.db.subscriber.SubscriberOperations;
import ru.builder.model.Equipment;
import ru.builder.model.document.Document;
import ru.builder.model.subscr.SubscriptionType;
import ru.builder.redis.RedisEntity;

import javax.ejb.Stateless;
import javax.enterprise.inject.Default;
import javax.inject.Inject;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

@Default
@Stateless
public class StatisticBean implements Statistic {

    private final Logger logger = Logger.getLogger(this.getClass().getSimpleName());

    @Inject
    private SubscriberOperations subscriberOperations;
    @Inject
    private Firebase firebase;
    @Inject
    private RedisEntity redisEntity;

    @Override
    public void sendStatisticMessage(String userId) {
        SendMessage sendMessage = SendMessage.builder()
                .chatId(Long.parseLong(userId))
                .text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üìàüìâ")
                .replyMarkup(getStatisticOptionButtons(userId))
                .build();
        try {
            new BuilderBot().execute(sendMessage);
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
    }

    @Override
    public void sendStatisticMessage(String userId, Integer messageId) {
        this.logEditMessage(Long.parseLong(userId), messageId);
        try {
            new BuilderBot().execute(
                    EditMessageText.builder()
                            .chatId(Long.parseLong(userId))
                            .text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üìàüìâ")
                            .messageId(messageId)
                            .replyMarkup(getStatisticOptionButtons(userId))
                            .build()
            );
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
    }

    @Override
    public void getCountOfSubscriptionsForEachUser(String userId, String status, Integer messageId) {
        this.logEditMessage(Long.parseLong(userId), messageId);
        long count = subscriberOperations.getCountOfSubscriptionsForEachUser(status);
        String text = "–î–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ü§∑‚Äç‚ôÇÔ∏è";
        String typeSubscription = status.equals("Active") ? "–ø–ª–∞—Ç–Ω—ã—Ö" : "—Ç—Ä–∏–∞–ª—å–Ω—ã—Ö";

        if (count != 0) {
            text = "–ö–æ–ª-–≤–æ <b>" + typeSubscription + "</b> –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç - " + count + " —à—Ç.";
        }

        EditMessageText sendMessage = EditMessageText.builder()
                .chatId(Long.parseLong(userId))
                .text(text)
                .messageId(messageId)
                .parseMode(ParseMode.HTML)
                .replyMarkup(getBackToMainMenuButton())
                .build();
        try {
            new BuilderBot().execute(sendMessage);
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
    }

    @Override
    public void getCountOfSubscriptionsForEachEquipment(String userId, String status, Integer messageId) {
        this.logEditMessage(Long.parseLong(userId), messageId);
        List<Equipment> equipmentList = subscriberOperations.getCountOfSubscriptionsForEachEquipment(status);


        // –ü–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î Firebase –≤—Å–µ –≤–∏–¥—ã —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏
        List<Document> heavyTypes = firebase.getAllHeavyMachineryName();
        equipmentList.forEach(equipment -> {
            // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏ –ø–æ ID –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –æ–±—ä–µ–∫—Ç equipment
            Document document = heavyTypes.stream().filter(heavyType -> heavyType.getFields().getId().getStringValue().equals(equipment.getId())).findFirst().orElse(null);
            String equipmentName = document != null ? document.getFields().getName().getStringValue() : "";
            equipment.setName(equipmentName);
        });
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏
        equipmentList.sort(Comparator.comparing(object -> object.getName()));

        String text = "–î–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ü§∑‚Äç‚ôÇÔ∏è";
        String typeSubscription = status.equals("Active") ? "–ø–ª–∞—Ç–Ω—ã—Ö" : "—Ç—Ä–∏–∞–ª—å–Ω—ã—Ö";

        StringBuilder sb = new StringBuilder();

        equipmentList.forEach(equipment -> {
            sb.append("<b>").append(equipment.getName()).append("</b>")
                    .append(" - ")
                    .append(equipment.getCountOfSubscription()).append(" —à—Ç.").append("\n");
        });

        sb.insert(0, "–ö–æ–ª-–≤–æ <b>" + typeSubscription + "</b> –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç\n\n");

        if (!equipmentList.isEmpty())
            text = sb.toString();

        EditMessageText sendMessage = EditMessageText.builder()
                .chatId(Long.parseLong(userId))
                .text(text)
                .messageId(messageId)
                .parseMode(ParseMode.HTML)
                .replyMarkup(getBackToMainMenuButton())
                .build();
        try {
            new BuilderBot().execute(sendMessage);
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
    }

    @Override
    public void getCountAndDurationOfPaidSubscriptionsForEachEquipment(String userId, Integer messageId) {
        this.logEditMessage(Long.parseLong(userId), messageId);
        List<Equipment> equipmentList = subscriberOperations.getCountAndDurationOfPaidSubscriptionsForEachEquipment();

        // –ü–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î Firebase –≤—Å–µ –≤–∏–¥—ã —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏
        List<Document> heavyTypes = firebase.getAllHeavyMachineryName();
        equipmentList.forEach(equipment -> {
            // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏ –ø–æ ID –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –æ–±—ä–µ–∫—Ç equipment
            Document document = heavyTypes.stream().filter(heavyType -> heavyType.getFields().getId().getStringValue().equals(equipment.getId())).findFirst().orElse(null);
            String equipmentName = document != null ? document.getFields().getName().getStringValue() : "";
            equipment.setName(equipmentName);
        });
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏
        equipmentList.sort(Comparator.comparing(object -> object.getName()));

        String text = "–î–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ü§∑‚Äç‚ôÇÔ∏è";
        StringBuilder sb = new StringBuilder();

        equipmentList.forEach(equipment -> {

            String duration = "";

            if (equipment.getDuration().equals(SubscriptionType.week.value())) {
                duration = "–ù–µ–¥–µ–ª—è";
            } else if (equipment.getDuration().equals(SubscriptionType.month.value())) {
                duration = "–ú–µ—Å—è—Ü";
            } else if (equipment.getDuration().equals(SubscriptionType.year.value())) {
                duration = "–ì–æ–¥";
            } else if (equipment.getDuration().equals(SubscriptionType.test.value())) {
                duration = "–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 5 –º–∏–Ω.";
            }

            sb.append("<b>").append(equipment.getName()).append("</b>")
                    .append("/")
                    .append(duration)
                    .append(" - ")
                    .append(equipment.getCountOfSubscription()).append(" —à—Ç.").append("\n");
        });

        sb.insert(0, "<b>–ö–æ–ª-–≤–æ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫</b> –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç\n\n");

        if (!equipmentList.isEmpty())
            text = sb.toString();

        EditMessageText sendMessage = EditMessageText.builder()
                .chatId(Long.parseLong(userId))
                .text(text)
                .messageId(messageId)
                .parseMode(ParseMode.HTML)
                .replyMarkup(getBackToMainMenuButton())
                .build();
        try {
            new BuilderBot().execute(sendMessage);
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
    }

    @Override
    public void getCountOfNewBotUsers(String userId, Integer messageId) {
        this.logEditMessage(Long.parseLong(userId), messageId);
        int countOfNewBotUsers = 0;

        if (redisEntity.getElements("new_users") != null
                && !redisEntity.getElements("new_users").isEmpty())
            countOfNewBotUsers = redisEntity.getElements("new_users").size();

        EditMessageText sendMessage = EditMessageText.builder()
                .chatId(Long.parseLong(userId))
                .text("–ù–æ–≤—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤ –±–æ—Ç–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å - " + countOfNewBotUsers)
                .messageId(messageId)
                .replyMarkup(getBackToMainMenuButton())
                .build();
        try {
            new BuilderBot().execute(sendMessage);
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
    }

    @Override
    public void getCountOfYaUsers(String userId, Integer messageId) {
        this.logEditMessage(Long.parseLong(userId), messageId);
        int countOfYaUsers = 0;
        int countOfYaUsersToday = 0;

        if (redisEntity.getElements("new_users_yandex") != null
                && !redisEntity.getElements("new_users_yandex").isEmpty())
            countOfYaUsers = redisEntity.getElements("new_users_yandex").size();

        if (redisEntity.getElements("new_users_yandex_today") != null
                && !redisEntity.getElements("new_users_yandex_today").isEmpty())
            countOfYaUsersToday = redisEntity.getElements("new_users_yandex_today").size();

        try {
            new BuilderBot().execute(EditMessageText.builder()
                    .chatId(Long.parseLong(userId))
                    .text("–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏–∑ –Ø–Ω–¥–µ–∫—Å–∞:\n\n" +
                            "–í—Å–µ–≥–æ - " + countOfYaUsers + "\n" +
                            "–°–µ–≥–æ–¥–Ω—è - " + countOfYaUsersToday
                    )
                    .messageId(messageId)
                    .replyMarkup(getBackToMainMenuButton())
                    .build());
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
    }

    @Override
    public void getCountOfBotUsers(String userId, Integer messageId) {
        this.logEditMessage(Long.parseLong(userId), messageId);
        long countOfBotUsers = subscriberOperations.getCountOfBotUsers();

        EditMessageText sendMessage = EditMessageText.builder()
                .chatId(Long.parseLong(userId))
                .text("–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ - " + countOfBotUsers)
                .messageId(messageId)
                .replyMarkup(getBackToMainMenuButton())
                .build();
        try {
            new BuilderBot().execute(sendMessage);
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
    }

    private InlineKeyboardMarkup getBackToMainMenuButton() {
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> listOfListInlineKey = new ArrayList<>();
        List<InlineKeyboardButton> inlineKeyboardButtons = new ArrayList<>();

        InlineKeyboardButton inlineKeyboardButton = new InlineKeyboardButton();
        inlineKeyboardButton.setText("<< –ù–∞–∑–∞–¥");
        inlineKeyboardButton.setCallbackData("back_to_main_menu");
        inlineKeyboardButtons.add(inlineKeyboardButton);
        listOfListInlineKey.add(inlineKeyboardButtons);
        inlineKeyboardMarkup.setKeyboard(listOfListInlineKey);

        return inlineKeyboardMarkup;
    }

    private InlineKeyboardMarkup getStatisticOptionButtons(String userId) {

        boolean isAdmin = redisEntity.getElement(userId.concat("_isAdmin")) != null
                && !redisEntity.getElement(userId.concat("_isAdmin")).isEmpty()
                && redisEntity.getElement(userId.concat("_isAdmin")).equals("true");

        boolean isYaAdmin = redisEntity.getElement(userId.concat("_isYaAdmin")) != null
                && !redisEntity.getElement(userId.concat("_isYaAdmin")).isEmpty()
                && redisEntity.getElement(userId.concat("_isYaAdmin")).equals("true");

        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> listOfListInlineKey = new ArrayList<>();
        List<InlineKeyboardButton> inlineKeyboardButtons = new ArrayList<>();

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º —É –Ω–µ–≥–æ –µ—â–µ –µ—Å—Ç—å —Ñ–ª–∞–∂–æ–∫ isYaAdmin (–î–ª—è —Ç–∞—Ä–≥–µ—Ç–æ–ª–æ–≥–∞),
        // —Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –Ø–Ω–¥–µ–∫—Å—É
        if (isYaAdmin && isAdmin) {
            InlineKeyboardButton inlineKeyboardButton = new InlineKeyboardButton();
            inlineKeyboardButton.setText("–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –Ø–Ω–¥–µ–∫—Å–∞");
            inlineKeyboardButton.setCallbackData("count_of_ya_user");
            inlineKeyboardButtons.add(inlineKeyboardButton);
            listOfListInlineKey.add(inlineKeyboardButtons);

            inlineKeyboardMarkup.setKeyboard(listOfListInlineKey);
            return inlineKeyboardMarkup;
        }

        InlineKeyboardButton inlineKeyboardButton = new InlineKeyboardButton();
        inlineKeyboardButton.setText("–û–±—â–µ–µ –∫–æ–ª-–≤–æ —Ç—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫");
        inlineKeyboardButton.setCallbackData("count_of_trial_subscr");
        inlineKeyboardButtons.add(inlineKeyboardButton);
        listOfListInlineKey.add(inlineKeyboardButtons);

        inlineKeyboardButtons = new ArrayList<>();
        inlineKeyboardButton = new InlineKeyboardButton();
        inlineKeyboardButton.setText("–û–±—â–µ–µ –∫–æ–ª-–≤–æ –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–æ–∫");
        inlineKeyboardButton.setCallbackData("count_of_paid_subscr");
        inlineKeyboardButtons.add(inlineKeyboardButton);
        listOfListInlineKey.add(inlineKeyboardButtons);

        inlineKeyboardButtons = new ArrayList<>();
        inlineKeyboardButton = new InlineKeyboardButton();
        inlineKeyboardButton.setText("–¢—Ä–∏–∞–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–µ");
        inlineKeyboardButton.setCallbackData("count_of_trial_subscr_by_equipment");
        inlineKeyboardButtons.add(inlineKeyboardButton);
        listOfListInlineKey.add(inlineKeyboardButtons);

        inlineKeyboardButtons = new ArrayList<>();
        inlineKeyboardButton = new InlineKeyboardButton();
        inlineKeyboardButton.setText("–ü–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–µ");
        inlineKeyboardButton.setCallbackData("count_of_paid_subscr_by_equipment");
        inlineKeyboardButtons.add(inlineKeyboardButton);
        listOfListInlineKey.add(inlineKeyboardButtons);

        inlineKeyboardButtons = new ArrayList<>();
        inlineKeyboardButton = new InlineKeyboardButton();
        inlineKeyboardButton.setText("–ö–æ–ª-–≤–æ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–µ");
        inlineKeyboardButton.setCallbackData("count_and_duration_of_paid_subscr_by_equipment");
        inlineKeyboardButtons.add(inlineKeyboardButton);
        listOfListInlineKey.add(inlineKeyboardButtons);

        inlineKeyboardButtons = new ArrayList<>();
        inlineKeyboardButton = new InlineKeyboardButton();
        inlineKeyboardButton.setText("–ù–æ–≤—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤ –±–æ—Ç–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å");
        inlineKeyboardButton.setCallbackData("count_of_new_user_by_day");
        inlineKeyboardButtons.add(inlineKeyboardButton);
        listOfListInlineKey.add(inlineKeyboardButtons);

        inlineKeyboardButtons = new ArrayList<>();
        inlineKeyboardButton = new InlineKeyboardButton();
        inlineKeyboardButton.setText("–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
        inlineKeyboardButton.setCallbackData("count_of_user");
        inlineKeyboardButtons.add(inlineKeyboardButton);
        listOfListInlineKey.add(inlineKeyboardButtons);

        inlineKeyboardButtons = new ArrayList<>();
        inlineKeyboardButton = new InlineKeyboardButton();
        inlineKeyboardButton.setText("–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –Ø–Ω–¥–µ–∫—Å–∞");
        inlineKeyboardButton.setCallbackData("count_of_ya_user");
        inlineKeyboardButtons.add(inlineKeyboardButton);
        listOfListInlineKey.add(inlineKeyboardButtons);

        inlineKeyboardMarkup.setKeyboard(listOfListInlineKey);

        return inlineKeyboardMarkup;
    }

    private void logEditMessage(Long userId, Integer messageId) {
        logger.log(Level.SEVERE, "Edit message (statistic): userId - {0}, messageId - {1}", new Object[]{userId, messageId});
    }

}
