package ru.builder.bean.payment;

import com.google.gson.FieldNamingPolicy;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonSyntaxException;
import okhttp3.*;
import org.telegram.telegrambots.meta.api.methods.ParseMode;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.builder.bean.admin.Admin;
import ru.builder.bean.firebase.Firebase;
import ru.builder.bean.general.General;
import ru.builder.bot.BuilderBot;
import ru.builder.db.payment.PaymentOperations;
import ru.builder.db.subscriber.SubscriberOperations;
import ru.builder.db.subscription.SubscriptionOperations;
import ru.builder.model.payment.*;
import ru.builder.model.payment.receipt.Customer;
import ru.builder.model.payment.receipt.Item;
import ru.builder.model.payment.receipt.Receipt;
import ru.builder.model.subscr.Subscriber;
import ru.builder.model.subscr.Subscription;
import ru.builder.model.subscr.SubscriptionType;
import ru.builder.redis.RedisEntity;

import javax.ejb.Stateless;
import javax.enterprise.inject.Default;
import javax.inject.Inject;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.*;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;

@Default
@Stateless
public class PaymentBean implements Payment {

    private final Logger logger = Logger.getLogger(this.getClass().getSimpleName());
    private final OkHttpClient client = new OkHttpClient();
    private final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    private final ScheduledExecutorService executorService = Executors.newSingleThreadScheduledExecutor();
    private final DateFormat utcFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");

    @Inject
    private SubscriptionOperations subscriptionOperations;
    @Inject
    private SubscriberOperations subscriberOperations;
    @Inject
    private PaymentOperations paymentOperations;
    @Inject
    private General general;
    @Inject
    private Admin admin;
    @Inject
    private Firebase firebase;
    @Inject
    private RedisEntity redisEntity;

    @Override
    public void createPayment(String userId) {
        String email = redisEntity.hashGet(userId, "email");
        String equipmentType = redisEntity.hashGet(userId, "equipmentType");
        String subscriptionType = redisEntity.hashGet(userId, "subscriptionType");

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        Subscription subscription = subscriptionOperations.getSubscriptionInfo(subscriptionType, equipmentType);

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa
        GsonBuilder gsonBuilder = new GsonBuilder();
        gsonBuilder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES);
        Gson gson = gsonBuilder.create();

        // –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 128 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ –æ–±—Ä–µ–∑–∞–µ–º –¥–æ 128 —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
        String description = subscription.getDescription().concat("/").concat(firebase.getHeavyMachineryNameById(equipmentType)).concat("/").concat(email);

        if (description.length() > 128) {
            description = description.substring(0, 128);
        }

        String receiptDescription = "–°–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∞ ".concat(firebase.getHeavyMachineryNameById(equipmentType).toUpperCase()).concat(". ").concat(subscription.getDescription());

        // Receipt: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ–∫–∞
        Receipt receipt = new Receipt(
                new Customer(email),
                Collections.singletonList(new Item(receiptDescription,
                        "1",
                        new Amount(subscription.getAmount(), "RUB"),
                        1)));

        CreatePayment createPayment = new CreatePayment(
                new PaymentMethodData("bank_card"),
                "true",
                "true",
                receipt);

        createPayment.setDescription(description);
        createPayment.setConfirmation(new Confirmation("redirect", redisEntity.getElement("returnUrl")));
        createPayment.setAmount(new Amount(subscription.getAmount(), "RUB"));

        logger.log(Level.SEVERE, "Create payment - {0} for userId - {1}", new Object[]{gson.toJson(createPayment), userId});

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa
        String authorization = Credentials.basic(System.getenv("shopId"), System.getenv("secret_key"));
        RequestBody body = RequestBody.create(gson.toJson(createPayment), MediaType.parse("application/json"));
        String createPaymentResponse = null;
        Request request = new Request.Builder()
                .url("https://api.yookassa.ru/v3/payments")
                .header("Authorization", authorization)
                .header("Content-Type", "application/json")
                .header("Idempotence-Key", UUID.randomUUID().toString())
                .post(body)
                .build();

        try (Response response = client.newCall(request).execute()) {

            logger.log(Level.SEVERE, "POST response status is - {0}", response.code());

            if (response.body() != null) {
                createPaymentResponse = response.body().string();
                logger.log(Level.SEVERE, "createPaymentResponse - {0}", createPaymentResponse);
            }

            // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞, —Ç–æ –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            if (response.code() != 200) {
                logger.log(Level.SEVERE, "Unexpected error for creating payment! - {0}", createPaymentResponse);
                general.sayUnexpectedError(userId, "‚ùóÔ∏è–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞üòï\n" +
                        "‚ÑπÔ∏è–í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω email –∞–¥—Ä–µ—Å " + email + "\n\n" +
                        "–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è -");
                admin.sendErrorMessagesToTechChannel("‚ùóÔ∏è–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n".concat("Json response - " + createPaymentResponse));
                return;
            }

        } catch (IOException e) {
            logger.log(Level.SEVERE, null, e);
        }


        ru.builder.model.payment.Payment payment = null;

        try {
            payment = gson.fromJson(createPaymentResponse, ru.builder.model.payment.Payment.class);
        } catch (JsonSyntaxException ex) {
            logger.log(Level.SEVERE, null, ex);
        }

        if (payment == null) {
            logger.log(Level.SEVERE, "Payment object is null, return ...");
            return;
        }

        String message = "*–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω:*\n"
                .concat("*ID –ø–ª–∞—Ç–µ–∂–∞:* `").concat(payment.getId()).concat("`\n")
                .concat("*–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:* –ÆKassa\n")
                .concat("*–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:* " + subscription.getDescription() + "\n")
                .concat("*–¢–∏–ø —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏:* " + firebase.getHeavyMachineryNameById(equipmentType) + "\n")
                .concat("*–°—É–º–º–∞:* " + subscription.getAmount() + " —Ä—É–±. \n")
                .concat("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üí∞–û–ø–ª–∞—Ç–∏—Ç—å, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã\n\n")
                .concat("*–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã —è –æ–ø–æ–≤–µ—â—É –í–∞—Å –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–∞.\n\n–ï—Å–ª–∏ –í—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã - —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É*")
                .concat("\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ, –∑–∞—Ç–µ–º –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ü–ò–°–ö–ê–ú–ò.");

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
        SendMessage sendMessage = SendMessage.builder()
                .chatId(userId)
                .text(message
                        .replaceAll("\\.", "\\\\.")
                        .replaceAll("\\,", "\\\\,")
                        .replaceAll("\\:", "\\\\:")
                        .replaceAll("\\!", "\\\\!")
                        .replaceAll("\\-", "\\\\-")
                        .replaceAll("\\)", "\\\\)")
                        .replaceAll("\\(", "\\\\("))
                .replyMarkup(getPaymentButton(payment.getConfirmation().getConfirmationUrl()))
                .parseMode(ParseMode.MARKDOWNV2)
                .build();
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º —Å—á–µ—Ç–æ–º
            Message paymentMessage = new BuilderBot().execute(sendMessage);

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –¥–∞–Ω–Ω–æ–π —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–µ
            Subscriber subscriber = subscriberOperations.getActiveOrTrialSubscriberByIdAndEquipmentType(userId, equipmentType);

            // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫—É, —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ "Trial" –∏ –µ—Å—Ç—å PaymentId
            if (subscriber != null
                    && subscriber.getStatus().equals("Trial")
                    && subscriber.getPaymentId() != null
                    && !subscriber.getPaymentId().isEmpty()) {
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –ø–æ PaymentId
                ru.builder.model.payment.Payment oldPayment = paymentOperations.getPaymentByPaymentId(subscriber.getPaymentId());
                // –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º messageId –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º —Å—á–µ—Ç–æ–º
                String messageId = oldPayment.getMessageId();

                if (messageId != null) {
                    try {
                        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        DeleteMessage deleteMessage = DeleteMessage.builder()
                                .chatId(userId)
                                .messageId(Integer.parseInt(messageId))
                                .build();
                        new BuilderBot().execute(deleteMessage);
                    } catch (TelegramApiException ex) {
                        logger.log(Level.SEVERE, "Can't delete the message, because - {0}", ex.getMessage());
                    }

                    // –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ä—ã–º –ø–ª–∞—Ç–µ–∂–æ–º - –≤—Å–µ —Ä–∞–≤–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤ –ë–î —Å—Ç–∞—Ä—ã–π –ø–ª–∞—Ç–µ–∂!
                    // –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂—É —Å—Ç–∞—Ç—É—Å "canceled" –∏ –ø—Ä–∏—á–∏–Ω—É, —á—Ç–æ –±—ã–ª —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
                    // –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç–∞—Ä—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–µ –±—É–¥–µ—Ç —É—á—Ç–µ–Ω
                    // –¢–∞–∫–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–º–æ–∂–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–π –ø–ª–∞—Ç–µ–∂, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –±—É–¥–µ—Ç —É—á—Ç–µ–Ω
                    oldPayment.setStatus("canceled");
                    oldPayment.setCancellationDetails(new CancellationDetails("merchant", "–ë—ã–ª —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂"));
                    paymentOperations.setCanceledPaymentInfo(oldPayment);
                }
            }

            // –§–∏–∫—Å–∏—Ä—É–µ–º –≤ –ë–î –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø–ª–∞—Ç–µ–∂—É
            paymentOperations.addPayment(payment, userId, String.valueOf(paymentMessage.getMessageId()));

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å—á–∏–∫–µ
            subscriberOperations.updateSubscriber(new Subscriber(
                    userId,
                    payment.getId(),
                    email,
                    subscriptionType,
                    equipmentType));

        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
    }

    @Override
    public void checkPaymentsStatus() {

        GsonBuilder gsonBuilder = new GsonBuilder();
        gsonBuilder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES);
        Gson gson = gsonBuilder.create();

        List<String> ids = paymentOperations.getPaymentIdsWithPendingStatus();
        String authorization = Credentials.basic(System.getenv("shopId"), System.getenv("secret_key"));

        ids.forEach(id -> {

            Subscriber subscriber = subscriberOperations.getSubscriberByPaymentId(id);

            if (subscriber == null) {
                logger.log(Level.SEVERE, "Subscriber with paymentId - {0} is null, return...", id);
                return;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa
            Request request = new Request.Builder()
                    .url("https://api.yookassa.ru/v3/payments/".concat(id))
                    .header("Authorization", authorization)
                    .header("Content-Type", "application/json")
                    .header("Idempotence-Key", UUID.randomUUID().toString())
                    .get()
                    .build();

            String checkPaymentResponse = null;

            try (Response response = client.newCall(request).execute()) {

                logger.log(Level.SEVERE, "GET response status is - {0}", response.code());

                if (response.body() != null) {
                    checkPaymentResponse = response.body().string();
                    logger.log(Level.SEVERE, "checkPaymentResponse - {0}", checkPaymentResponse);
                }

                // –ï—Å–ª–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –¢–µ—Ö. –∫–∞–Ω–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ.
                if (response.code() != 200) {
                    logger.log(Level.SEVERE, "Unexpected error when checking payment status with payment id - {0}, Error - {1}.", new Object[]{id, checkPaymentResponse});
                    admin.sendErrorMessagesToTechChannel("‚ùóÔ∏è–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞!\n".concat("Json response - " + checkPaymentResponse));
                    return;
                }

            } catch (IOException e) {
                logger.log(Level.SEVERE, null, e);
            }

            ru.builder.model.payment.Payment payment = null;

            try {
                payment = gson.fromJson(checkPaymentResponse, ru.builder.model.payment.Payment.class);
            } catch (JsonSyntaxException ex) {
                logger.log(Level.SEVERE, null, ex);
            }

            if (payment == null) {
                logger.log(Level.SEVERE, "Payment object is null, return ...");
                return;
            }

            // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –ÆKassa 'pending', —Ç–æ –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂
            if (payment.getStatus().equals("pending"))
                return;

            // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å canceled - —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤ –ë–î –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏—á–∏–Ω–µ –∏ –æ–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (payment.getStatus().equals("canceled")) {
                logger.log(Level.SEVERE, "Payment status is canceled - {0}", gson.toJson(payment));
                paymentOperations.setCanceledPaymentInfo(payment);
                general.sendMessageAboutCanceledPayment(subscriber.getUserId(), payment.getCancellationDetails().getReason());
                return;
            }

            payment.setUserId(subscriber.getUserId());
            // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å succeeded - –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø–ª–∞—Ç–µ–∂—É –∏ –≤—ã–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            Calendar nextBillCalendar = null;

            if (payment.getCapturedAt() != null && convertDate(payment.getCapturedAt()) != null) {
                nextBillCalendar = Calendar.getInstance();
                nextBillCalendar.setTime(convertDate(payment.getCapturedAt()));

                Subscription subscription = subscriptionOperations.getSubscriptionInfo(subscriber.getSubscriptionType(), subscriber.getEquipmentType());

                if (subscriber.getSubscriptionType().equals(SubscriptionType.week.value())) {
                    nextBillCalendar.add(Calendar.WEEK_OF_MONTH, subscription.getDuration());
                } else if (subscriber.getSubscriptionType().equals(SubscriptionType.month.value())) {
                    nextBillCalendar.add(Calendar.MONTH, subscription.getDuration());
                } else if (subscriber.getSubscriptionType().equals(SubscriptionType.year.value())) {
                    nextBillCalendar.add(Calendar.YEAR, subscription.getDuration());
                } else if (subscriber.getSubscriptionType().equals(SubscriptionType.test.value())) {
                    nextBillCalendar.add(Calendar.MINUTE, subscription.getDuration());
                }

                String nextBillDate = dateFormat.format(nextBillCalendar.getTime());
                logger.log(Level.INFO, "NextBillDate for payment - {0} is - {1}", new Object[]{payment.getId(), nextBillDate});
                payment.setNextBillDate(nextBillDate);
            } else {
                logger.log(Level.SEVERE, "Calendar is null for CapturedAt - {0}. Don't add info about next payment for paymentId - {1}", new Object[]{payment.getCapturedAt(), payment.getId()});
            }

            paymentOperations.setSucceededPaymentInfo(payment);
            // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ Subscribers
            subscriberOperations.updateSubscriptionInfo(subscriber.getUserId(), payment.getId(), payment.getCapturedAt(), false);

            // –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
            general.sendMessageAboutSuccessfulPayment(subscriber.getUserId(), subscriber.getEquipmentType());

            // –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞, —Ç–æ —Å–æ–∑–¥–∞–µ–º —Ç–∞—Å–∫—É –Ω–∞ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂
            if (nextBillCalendar != null
                    && payment.getNextBillDate() != null
                    && !payment.getNextBillDate().isEmpty()) {
                this.createAutoPayment(payment, nextBillCalendar);
            }
        });

    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞—Ç–µ–∂ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ payment –∏ –¥–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—á–µ—Ç–∞ nextBillDate.
     * –ó–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ä–∞–∑–Ω–∏—Ü–µ–π –º–µ–∂–¥—É nextBillDate –∏ —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º.
     * –ï—Å–ª–∏ –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è, —Ç–æ –ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.
     * –°–æ–∑–¥–∞–Ω–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞—Ç–µ–∂ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
     * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–æ–≤–µ—â–∞–µ—Ç—Å—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ –∏–ª–∏ –º–µ–Ω–µ–µ.
     *
     * @param payment       –û–±—ä–µ–∫—Ç –ø–ª–∞—Ç–µ–∂–∞, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞—Ç–µ–∂.
     * @param nextBillDate  –î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—á–µ—Ç–∞, –∫–æ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞—Ç–µ–∂.
     */
    public void createAutoPayment(Payment payment, Calendar nextBillDate) {
        long delay = nextBillDate.getTime().getTime() - Calendar.getInstance().getTimeInMillis();
        logger.log(Level.SEVERE, "Create autoPayment task for paymentId - {0} with delay - {1}", new Object[]{payment.getId(), delay});

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å—á–∏–∫–µ –∏ –ø–æ–¥–ø–∏—Å–∫–µ
        Subscriber subscriber = subscriberOperations.getSubscriberByPaymentId(payment.getId());
        Subscription subscription = subscriptionOperations.getSubscriptionInfo(subscriber.getSubscriptionType(), subscriber.getEquipmentType());

        // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —á–µ–∫–∞
        String receiptDescription = "–°–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∞ ".concat(firebase.getHeavyMachineryNameById(subscriber.getEquipmentType()).toUpperCase()).concat(". ").concat(subscription.getDescription());

        // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —á–µ–∫–∞
        Receipt receipt = new Receipt(
                new Customer(subscriber.getEmail()),
                Collections.singletonList(new Item(receiptDescription,
                        "1",
                        new Amount(payment.getAmount().getValue(), payment.getAmount().getCurrency()),
                        1)));

        // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ CreatePayment –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        CreatePayment createPayment = new CreatePayment(payment.getPaymentMethod().getId(), "true", receipt);
        createPayment.setAmount(payment.getAmount());

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "–ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂:", –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞
        if (!payment.getDescription().contains("–ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂:")) {
            createPayment.setDescription("–ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂: " + payment.getDescription());
        } else {
            createPayment.setDescription(payment.getDescription());
        }

        // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        executorService.schedule(() -> this.createScheduleTaskForAutoPayment(createPayment, payment.getId(), nextBillDate, false), delay, TimeUnit.MILLISECONDS);

        // –ï—Å–ª–∏ –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è, –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        if (delay < 0) {
            logger.log(Level.SEVERE, "delay - {0} is negative, don't broadcasting user about expired subscription ...", delay);
            return;
        }

        // –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤–∞—è, –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∑–∞ 2 –º–∏–Ω—É—Ç—ã –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        // –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∑–∞ 24 —á–∞—Å–∞ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        if (subscription.getSubscriptionType() == SubscriptionType.test) {
            nextBillDate.add(Calendar.MINUTE, -2);
        } else {
            nextBillDate.add(Calendar.HOUR, -24);
        }
        general.sendWarningMessageAboutSubscriptionWillBeExpired(payment.getUserId(), payment.getId(), nextBillDate);
    }


    @Override
    public void retryErrorPayments() {
        logger.log(Level.SEVERE, "Getting retry error payments ...");
        //–ü–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ "error" –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂
        List<CreatePayment> errorPayments = paymentOperations.getErrorPaymentsByStatus("error");

        if (errorPayments == null) {
            logger.log(Level.SEVERE, "Error payments wasn't found...");
            return;
        }

        errorPayments.forEach(autoPayment -> {

            Subscriber subscriber = subscriberOperations.getSubscriberByPaymentId(autoPayment.getPaymentMethodId());

            if (autoPayment.getTryCount() == 3) {
                logger.log(Level.SEVERE, "Auto payment was send 3 times, return user warning message");
                // –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂
                general.sayUnexpectedError(subscriber.getUserId(), "‚ùó–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ —Å 3 –ø–æ–ø—ã—Ç–æ–∫.\n–ü—Ä–æ—Å—å–±–∞ –Ω–µ –æ—Ñ–æ—Ä–º–ª—è—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É!");
                // –î–ª—è –æ—à–∏–±–æ—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å failed, —á—Ç–æ–±—ã –Ω–µ –±—Ä–∞—Ç—å –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –¥–∞–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É
                paymentOperations.setNewStatusForErrorAutoPayment(autoPayment.getPaymentMethodId(), "failed", "error");
                admin.sendErrorMessagesToTechChannel("‚ùó–ü–∞–¥–∞—é—Ç –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏! –° 3 –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ –ø—Ä–æ—à–ª–∏! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!");
                return;
            }

            logger.log(Level.SEVERE, "Send RETRY create autoPayment ...");

            GsonBuilder gsonBuilder = new GsonBuilder();
            gsonBuilder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES);
            Gson gson = gsonBuilder.create();

            logger.log(Level.SEVERE, "Create RETRY autoPayment - {0}", gson.toJson(autoPayment));

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa
            String authorization = Credentials.basic(System.getenv("shopId"), System.getenv("secret_key"));
            RequestBody body = RequestBody.create(gson.toJson(autoPayment), MediaType.parse("application/json"));
            String createPaymentResponse = null;
            Request request = new Request.Builder()
                    .url("https://api.yookassa.ru/v3/payments")
                    .header("Authorization", authorization)
                    .header("Content-Type", "application/json")
                    .header("Idempotence-Key", UUID.randomUUID().toString())
                    .post(body)
                    .build();

            try (Response response = client.newCall(request).execute()) {

                logger.log(Level.SEVERE, "POST response status is - {0}", response.code());

                if (response.body() != null) {
                    createPaymentResponse = response.body().string();
                    logger.log(Level.SEVERE, "createPaymentResponse - {0}", createPaymentResponse);
                }

                // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –û–ü–Ø–¢–¨ –æ—à–∏–±–æ—á–Ω—ã–π - —Ñ–∏–∫—Å–∏—Ä—É–µ–º + 1 –ø–æ–≤—Ç–æ—Ä –∏ –∂–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–µ–ø–æ–≤—Ç–æ—Ä–∞
                if (response.code() != 200) {
                    logger.log(Level.SEVERE, "Unexpected error for auto payment with payment method id - {0}, Error - {1}\nAdd retry count value +1 ", new Object[]{autoPayment.getPaymentMethodId(), createPaymentResponse});
                    paymentOperations.setRetryCountForErrorAutoPayment(autoPayment.getPaymentMethodId(), autoPayment.getTryCount());
                    return;
                }

            } catch (IOException e) {
                logger.log(Level.SEVERE, null, e);
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            ru.builder.model.payment.Payment payment = null;

            try {
                payment = gson.fromJson(createPaymentResponse, ru.builder.model.payment.Payment.class);
            } catch (JsonSyntaxException ex) {
                logger.log(Level.SEVERE, null, ex);
            }

            if (payment == null) {
                logger.log(Level.SEVERE, "Payment object is null, return ...");
                return;
            }

            // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å canceled - —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤ –ë–î –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏—á–∏–Ω–µ –∏ –æ–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            // –¢–∞–∫–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–≤—Ç–æ—Ä –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞: —á–µ—Ä–µ–∑ 2 –¥–Ω—è –∏ —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π
            if (payment.getStatus().equals("canceled")) {
                logger.log(Level.SEVERE, "Payment status is canceled - {0}", gson.toJson(payment));
                this.paymentOperations.setNewStatusForErrorAutoPayment(autoPayment.getPaymentMethodId(), "canceled", "error");
                // –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª –∏ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –µ—â–µ –¥–≤–µ –ø–æ–ø—ã—Ç–∫–∏: —á–µ—Ä–µ–∑ 2 –¥–Ω—è –∏ —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π
                general.sendMessageAboutCanceledAutoPayment(subscriber.getUserId(), payment.getCancellationDetails().getReason());
                return;
            }

            Calendar nextBillCalendar = null;
            if (payment.getCapturedAt() != null && convertDate(payment.getCapturedAt()) != null) {
                nextBillCalendar = Calendar.getInstance();
                nextBillCalendar.setTime(convertDate(payment.getCapturedAt()));

                Subscription subscription = subscriptionOperations.getSubscriptionInfo(subscriber.getSubscriptionType(), subscriber.getEquipmentType());

                if (subscriber.getSubscriptionType().equals(SubscriptionType.week.value())) {
                    nextBillCalendar.add(Calendar.WEEK_OF_MONTH, subscription.getDuration());
                } else if (subscriber.getSubscriptionType().equals(SubscriptionType.month.value())) {
                    nextBillCalendar.add(Calendar.MONTH, subscription.getDuration());
                } else if (subscriber.getSubscriptionType().equals(SubscriptionType.year.value())) {
                    nextBillCalendar.add(Calendar.YEAR, subscription.getDuration());
                } else if (subscriber.getSubscriptionType().equals(SubscriptionType.test.value())) {
                    nextBillCalendar.add(Calendar.MINUTE, subscription.getDuration());
                }

                String nextBillDate = dateFormat.format(nextBillCalendar.getTime());
                logger.log(Level.INFO, "NextBillDate for auto payment - {0} is - {1}", new Object[]{payment.getId(), nextBillDate});
                payment.setNextBillDate(nextBillDate);
            } else {
                logger.log(Level.SEVERE, "Calendar is null for CapturedAt - {0}. Don't add info about next payment for auto payment with paymentId - {1}", new Object[]{payment.getCapturedAt(), payment.getId()});
            }

            // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ, —Ç–æ –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –≤ ErrorPayments –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ paymentMethodId —Å—Ç–∞—Ç—É—Å success, —á—Ç–æ–±—ã –µ–≥–æ –Ω–µ –±—Ä–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É
            paymentOperations.setNewStatusForErrorAutoPayment(autoPayment.getPaymentMethodId(), "success", "error");
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É Payments –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
            paymentOperations.addAutoPayment(payment, autoPayment.getUserId());
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É Subscribers –Ω–æ–≤—É—é —Å—Ç—Ä–æ—á–∫—É —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –≤ —Å—Ç–∞—Ç—É—Å–µ 'Active'
            Subscriber subscriberAfterAutoPayment = subscriberOperations.getSubscriberByPaymentId(autoPayment.getPaymentMethodId());
            subscriberAfterAutoPayment.setPaymentId(payment.getId());
            subscriberOperations.addSubscriberAfterAutoPayment(subscriberAfterAutoPayment, payment.getCapturedAt());

            // –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
            general.sendMessageAboutSuccessfullyAutoPayment(subscriberAfterAutoPayment.getUserId(), subscriber.getEquipmentType());

            // –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞, —Ç–æ —Å–æ–∑–¥–∞–µ–º —Ç–∞—Å–∫—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂
            if (nextBillCalendar != null
                    && payment.getNextBillDate() != null
                    && !payment.getNextBillDate().isEmpty()) {
                this.createAutoPayment(payment, nextBillCalendar);
            }
        });
    }

    @Override
    public void retryCanceledPayments() {
        logger.log(Level.SEVERE, "Getting retry canceled payments ...");
        //–ü–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ "canceled" –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂
        List<CreatePayment> canceledPayments = paymentOperations.getErrorPaymentsByStatus("canceled");

        if (canceledPayments == null
                || canceledPayments.isEmpty()) {
            logger.log(Level.SEVERE, "Canceled payments wasn't found...");
            return;
        }

        canceledPayments.forEach(payment -> {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ—à–∏–±–∫–∏ –ø–æ paymentMethodId –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ –ë–î
            String errorDate = this.paymentOperations.getErrorDateByPaymentMethodId(payment.getPaymentMethodId());
            if (errorDate == null) {
                logger.log(Level.SEVERE, "PaymentMethodId - {0}: errorDate is null, return ...", payment.getPaymentMethodId());
                return;
            }

            logger.log(Level.SEVERE, "PaymentMethodId - {0}: errorDate - {1}", new Object[]{payment.getPaymentMethodId(), errorDate});
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –æ—à–∏–±–∫–∏ –≤ LocalDateTime
            LocalDateTime errorDateTime = LocalDateTime.parse(errorDate, formatter);
            logger.log(Level.SEVERE, "PaymentMethodId - {0}: errorDateTime - {1}", new Object[]{payment.getPaymentMethodId(), errorDateTime});

            // –ï—Å–ª–∏ tryCount = 0, –∑–Ω–∞—á–∏—Ç –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ 2 –¥–Ω—è
            // –í billDate –ø–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É, —Ç–∞–∫ –∫–∞–∫ –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, —Ç–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
            if (payment.getTryCount() == 0) {
                // –ü—Ä–∏–±–∞–≤–ª—è–µ–º –∫ –¥–∞—Ç–µ –æ—à–∏–±–∫–∏ 2 –¥–Ω—è
                LocalDateTime plusTwoDaysDateTime = errorDateTime.plusDays(2);
                logger.log(Level.SEVERE, "PaymentMethodId - {0}: plusTwoDaysDateTime - {1}", new Object[]{payment.getPaymentMethodId(), plusTwoDaysDateTime});

                // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –¥–∞—Ç–æ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–∞ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                // –≠—Ç—É —Ä–∞–∑–Ω–∏—Ü—É –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤ executorService –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
                long retryMilliSec = ChronoUnit.MILLIS.between(LocalDateTime.now(), plusTwoDaysDateTime);
                logger.log(Level.SEVERE, "PaymentMethodId - {0}: retryMilliSec - {1}", new Object[]{payment.getPaymentMethodId(), retryMilliSec});

                logger.log(Level.SEVERE, "PaymentMethodId - {0}: Try count value = 0, start task after 2 days ...", payment.getPaymentMethodId());
                this.executorService.schedule(() ->
                                this.createScheduleTaskForAutoPayment(
                                        payment,
                                        payment.getPaymentMethodId(),
                                        Calendar.getInstance(), true),
                        retryMilliSec,
                        TimeUnit.MILLISECONDS);

                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º tryCount
                this.paymentOperations.setRetryCountForErrorAutoPayment(payment.getPaymentMethodId(), 0);
                // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                this.paymentOperations.setNewStatusForErrorAutoPayment(payment.getPaymentMethodId(), "wait", "canceled");
            }
            // –ï—Å–ª–∏ tryCount = 2, –∑–Ω–∞—á–∏—Ç –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ 3 –¥–Ω—è
            // –í billDate –ø–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É, —Ç–∞–∫ –∫–∞–∫ –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, —Ç–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
            else if (payment.getTryCount() == 2) {
                // –ü—Ä–∏–±–∞–≤–ª—è–µ–º –∫ –¥–∞—Ç–µ –æ—à–∏–±–∫–∏ 5 –¥–Ω–µ–π (—Ç–æ –µ—Å—Ç—å 2 + 3)
                LocalDateTime plusThreeDaysDateTime = errorDateTime.plusDays(5);
                logger.log(Level.SEVERE, "PaymentMethodId - {0}: plusThreeDaysDateTime - {1}", new Object[]{payment.getPaymentMethodId(), plusThreeDaysDateTime});

                // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –¥–∞—Ç–æ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–∞ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                // –≠—Ç—É —Ä–∞–∑–Ω–∏—Ü—É –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤ executorService –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
                long retryMilliSec = ChronoUnit.MILLIS.between(LocalDateTime.now(), plusThreeDaysDateTime);
                logger.log(Level.SEVERE, "PaymentMethodId - {0}: retryMilliSec - {1}", new Object[]{payment.getPaymentMethodId(), retryMilliSec});

                logger.log(Level.SEVERE, "PaymentMethodId - {0}: Try count value = 1, start task after 3 days ...", payment.getPaymentMethodId());
                this.executorService.schedule(() ->
                                this.createScheduleTaskForAutoPayment(
                                        payment,
                                        payment.getPaymentMethodId(),
                                        Calendar.getInstance(), true),
                        retryMilliSec,
                        TimeUnit.MILLISECONDS);

                // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                this.paymentOperations.setNewStatusForErrorAutoPayment(payment.getPaymentMethodId(), "wait", "canceled");
            }
        });
    }

    private void createScheduleTaskForAutoPayment(CreatePayment createPayment, String paymentId, Calendar billDate, boolean isRetry) {
        logger.log(Level.INFO, "Start createScheduleTaskForAutoPayment - {0}", new Gson().toJson(createPayment));

        // –ü–æ ID –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        Subscriber subscriber = subscriberOperations.getSubscriberByPaymentId(paymentId);
        logger.log(Level.INFO, "Subscriber info for paymentId - {0}: - {1}", new Object[]{paymentId, new Gson().toJson(subscriber)});

        if (subscriber == null) {
            logger.log(Level.SEVERE, "Method: createScheduleTaskForAutoPayment >> Subscriber with paymentId - {0} is null, return...", paymentId);
            return;
        }

        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ 'Expired', –∑–Ω–∞—á–∏—Ç –õ–ò–ë–û –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —É–∂–µ –ù–ï –ø–µ—Ä–≤—ã–π –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂, –õ–ò–ë–û –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –î–û —Å–∞–º–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞
        // –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –ø–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, ID —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏ –∏ –≤ —Å—Ç–∞—Ç—É—Å–µ 'Active' –∏–ª–∏ 'AutoPay'
        if (subscriber.getStatus().equals("Expired")) {
            String userId = subscriber.getUserId();
            String equipmentType = subscriber.getEquipmentType();
            logger.log(Level.SEVERE, "Status for paymentId - {0} is Expired. Get Subscriber info by userId - {1}, equipmentType - {2} and subscription status is 'Active' or 'AutoPay'...", new Object[]{paymentId, userId, equipmentType});
            subscriber = subscriberOperations.getSubscriberByIdAndEquipmentTypeAndActiveOrAutoPayStatus(userId, equipmentType);

            // –ï—Å–ª–∏ —Ç–∞–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–Ω–∞—á–∏—Ç –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –º–µ—Ç–æ–¥–∞
            if (subscriber == null) {
                logger.log(Level.SEVERE, "Method: createScheduleTaskForAutoPayment >> Subscriber by userId - {0}, equipmentType - {1} and subscription status is 'Active' or 'AutoPay' is null, return...", new Object[]{userId, equipmentType});
                // –¢–∞–∫–∂–µ –≤ —Ç–∞–±–ª–∏—Ü–µ ErrorPayments –∑–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å, –ø—Ä–æ—Å—Ç–∞–≤–ª—è—è —Å—Ç–∞—Ç—É—Å 'stop', –µ—Å–ª–∏ –ø—Ä–∏—à–µ–ª —Ñ–ª–∞–∂–æ–∫ isRetry = true (–¢–æ –µ—Å—Ç—å –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –±—ã–ª –∏–∑ retryCanceledPayments())
                if (isRetry)
                    this.paymentOperations.setNewStatusForErrorAutoPayment(createPayment.getPaymentMethodId(), "stop", "wait");
                return;
            }
            logger.log(Level.SEVERE, "Subscriber info by userId - {0}, equipmentType - {1} and subscription status is 'Active' or 'AutoPay': {2}", new Object[]{subscriber.getUserId(), subscriber.getEquipmentType(), new Gson().toJson(subscriber)});

            // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞, –ø—Ä–∏ —ç—Ç–æ–º –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ü–û–í–¢–û–†–ù–´–ô –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ (isRetry = true)
            // –∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É–∂–µ –µ—Å—Ç—å –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —ç—Ç—É —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É -
            // –∑–Ω–∞—á–∏—Ç –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –ù–ï –í–´–ü–û–õ–ù–Ø–ï–ú, —Ç–∞–∫ –∫–∞–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫ –æ—Ç–º–µ–Ω–∏–ª –ø—Ä–æ—à–ª—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏ –æ—Ñ–æ—Ä–º–∏–ª –Ω–æ–≤—É—é
            if (isRetry && subscriber.getStatus().equals("Active")) {
                logger.log(Level.SEVERE, "Method: createScheduleTaskForAutoPayment >> Subscriber: paymentId - {0}, userId - {1}, equipmentType - {2}, isRetry - true, status - Active. Dont auto pay for PaymentMethodId - {3}, return ...", new Object[]{subscriber.getPaymentId(), subscriber.getUserId(), subscriber.getEquipmentType(), createPayment.getPaymentMethodId()});
                this.paymentOperations.setNewStatusForErrorAutoPayment(createPayment.getPaymentMethodId(), "stop", "wait");
                return;
            }
        }

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫—É –Ω–µ –æ—Ç–º–µ–Ω–∏–ª–∏ (–≤–∫–ª—é—á–µ–Ω –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂)
        // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞:
        // 1. –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É (–ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å 'Expired')
        // 2. –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ Redis
        // 3. –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –æ—Ç–º–µ–Ω–∏–ª–∏ –î–û –ü–ï–†–í–û–ì–û –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞, —Ç–æ —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
        // 3a. –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞—Ö, —Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        // 3a. –¢–∞–∫–∂–µ –≤ —Ç–∞–±–ª–∏—Ü–µ ErrorPayments –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂—É —Å—Ç–∞—Ç—É—Å 'stop', —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä—ã—Ö –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π
        if (!subscriber.isAutoPay()) {
            logger.log(Level.SEVERE, "Subscriber - {0} is unsubscribe - don't create auto payment ...", subscriber.getUserId());
            logger.log(Level.SEVERE, "Setting Expired status for subscriber - {0} with paymentId - {1} and expiredDate - {2}", new Object[]{subscriber.getUserId(), paymentId, dateFormat.format(billDate.getTime())});
            // –ë–µ—Ä–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ Subscriber (subscriber.getPaymentId()), —Ç–∞–∫ –∫–∞–∫ –ø–æ–¥–ø–∏—Å–∫–∞ —Å ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —É–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç–∞
            // –∏ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, —á—Ç–æ –º—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ –±—É–¥–µ–º –∑–∞–∫—Ä—ã–≤–∞—Ç—å –æ–¥–Ω—É –∏ —Ç—É –∂–µ –ø–æ–¥–ø–∏—Å–∫—É
            subscriberOperations.updateSubscriptionInfo(subscriber.getUserId(), subscriber.getPaymentId(), dateFormat.format(billDate.getTime()), true);
            // –í Redis —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞ —Å–ø–µ—Ü–∏–µ—Ö–Ω–∏–∫–∏, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –ø–æ–ª—É—á–∞–ª –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã, –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–ø–∏—à–µ—Ç—Å—è —Å–Ω–æ–≤–∞
            redisEntity.remElement(subscriber.getEquipmentType(), subscriber.getUserId());

            // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ù–ï AutoPay, —Ç–æ —Å–æ–æ–±—â–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –µ–≥–æ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
            // –¢–æ –µ—Å—Ç—å –µ—Å–ª–∏ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ –æ–∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–º–µ–Ω–∏–ª –ø–æ–¥–ø–∏—Å–∫—É (–æ—Ç–∫–ª—é—á–∏–ª –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è),
            // —Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            if (subscriber.getStatus() != null
                    && !subscriber.getStatus().equals("AutoPay"))
                general.sayHelloAfterUnsubscribe(subscriber.getUserId(), subscriber.getEquipmentType());

            // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂, —Ç–æ –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ ErrorPayments —ç—Ç–æ–º—É –ø–ª–∞—Ç–µ–∂—É —Å—Ç–∞—Ç—É—Å "stop",
            // —á—Ç–æ–±—ã –±–æ–ª—å—à–µ –Ω–µ –±—Ä–∞—Ç—å –µ–≥–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É
            if (subscriber.getStatus() != null
                    && subscriber.getStatus().equals("AutoPay")) {
                this.paymentOperations.setNewStatusForErrorAutoPayment(createPayment.getPaymentMethodId(), "stop", "wait");
            }

            cleanUp(subscriber.getUserId());
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ AutoPay
        subscriberOperations.updateSubscriptionInfo(subscriber.getUserId(), subscriber.getPaymentId());
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–ª–∞–∂–∫–∏ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Expired
        cleanUp(subscriber.getUserId());

        logger.log(Level.SEVERE, "Send create autoPayment ...");

        GsonBuilder gsonBuilder = new GsonBuilder();
        gsonBuilder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES);
        Gson gson = gsonBuilder.create();

        logger.log(Level.SEVERE, "Create autoPayment - {0}", gson.toJson(createPayment));

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa
        String authorization = Credentials.basic(System.getenv("shopId"), System.getenv("secret_key"));
        RequestBody body = RequestBody.create(gson.toJson(createPayment), MediaType.parse("application/json"));
        String createPaymentResponse = null;
        Request request = new Request.Builder()
                .url("https://api.yookassa.ru/v3/payments")
                .header("Authorization", authorization)
                .header("Content-Type", "application/json")
                .header("Idempotence-Key", UUID.randomUUID().toString())
                .post(body)
                .build();

        try (Response response = client.newCall(request).execute()) {

            logger.log(Level.SEVERE, "POST response status is - {0}", response.code());

            if (response.body() != null) {
                createPaymentResponse = response.body().string();
                logger.log(Level.SEVERE, "createPaymentResponse - {0}", createPaymentResponse);
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON –∑–∞–ø—Ä–æ—Å –≤ –ë–î –¥–ª—è –ø–µ—Ä–µ–ø–æ–≤—Ç–æ—Ä–∞ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞
            // –ó–¥–µ—Å—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø–∏—Å—å –æ—à–∏–±–æ—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î –∏ –¥–∞–ª—å–Ω–µ–π—à–∏–π –µ–≥–æ –ø–æ–≤—Ç–æ—Ä
            // –¢–∞–∫–∂–µ –≤ –∫–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–∏–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            // HTTP –∫–æ–¥ –ù–ï 200 - —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ
            if (response.code() != 200) {
                logger.log(Level.SEVERE, "Unexpected error for auto payment with payment method id - {0}, Error - {1}\nAdd payment info to DB and retry it ", new Object[]{createPayment.getPaymentMethodId(), createPaymentResponse});
                paymentOperations.addErrorPayment(createPayment.getPaymentMethodId(), gson.toJson(createPayment), true, subscriber.getUserId(), subscriber.getSubscriptionType(), "error");
                general.sendMessageAboutAutoPaymentError(subscriber.getUserId(), subscriber.getEquipmentType());
                admin.sendErrorMessagesToTechChannel("‚ùóÔ∏è–ù–∞—á–∞–ª–∏ –ø–∞–¥–∞—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n".concat("Json response - " + createPaymentResponse));
                return;
            }

        } catch (IOException e) {
            logger.log(Level.SEVERE, null, e);
        }

        ru.builder.model.payment.Payment payment = null;

        try {
            payment = gson.fromJson(createPaymentResponse, ru.builder.model.payment.Payment.class);
            logger.log(Level.SEVERE, "Payment - {0}", gson.toJson(payment));
        } catch (JsonSyntaxException ex) {
            logger.log(Level.SEVERE, null, ex);
        }

        if (payment == null) {
            logger.log(Level.SEVERE, "Payment object is null, return ...");
            return;
        }

        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å canceled - —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤ –ë–î –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏—á–∏–Ω–µ –∏ –æ–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        // –¢–∞–∫–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–≤—Ç–æ—Ä –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞: —á–µ—Ä–µ–∑ 2 –¥–Ω—è –∏ —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π
        if (payment.getStatus().equals("canceled")) {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—à–∏–±–æ—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ "wait" –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ –Ω–∏—Ö
            // ID –ø–ª–∞—Ç–µ–∂–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–µ–π—á–∞—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π
            List<CreatePayment> waitPayments = paymentOperations.getErrorPaymentsByStatus("wait");
            if (waitPayments != null
                    && !waitPayments.isEmpty()) {

                // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ (1-–∞—è –ø–æ–ø—ã—Ç–∫–∞), —Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–º—É tryCount = 2,
                // –æ–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –º–µ—Ç–æ–¥–∞
                if (waitPayments.stream().anyMatch(elem -> elem.getPaymentMethodId().equals(createPayment.getPaymentMethodId()) && elem.getTryCount() == 1)) {
                    logger.log(Level.SEVERE, "After first error autoPayment: Set canceled status for error autoPayment - {0}", createPayment.getPaymentMethodId());
                    this.paymentOperations.setNewStatusForErrorAutoPayment(createPayment.getPaymentMethodId(), "canceled", "wait");
                    logger.log(Level.SEVERE, "After first error autoPayment: Set retry count value = 2 for error autoPayment - {0}", createPayment.getPaymentMethodId());
                    this.paymentOperations.setRetryCountForErrorAutoPayment(createPayment.getPaymentMethodId(), 1);

                    general.sayAutoPaymentError(subscriber.getUserId(),
                            "‚ùóÔ∏è–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –ø–æ –í–∞—à–µ–π –∫–∞—Ä—Ç–µ –Ω–µ –ø—Ä–æ—à–µ–ª!\n\n" +
                                    "<b>–ü—Ä–∏—á–∏–Ω–∞:</b> " + payment.getCancellationDetails().getReason() + "\n\n" +
                                    "<b>–Ø –ø—Ä–µ–¥–ø—Ä–∏–º—É –µ—â–µ –æ–¥–Ω—É –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ 3 –¥–Ω—è.</b>\n\n" +
                                    "‚ÑπÔ∏è–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤.\n" +
                                    "–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ü–ò–°–ö–ê–ú–ò</b> –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É");
                    return;
                }

                // –ï—Å–ª–∏ –∂–µ —ç—Ç–æ –±—ã–ª –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ (2-–∞—è –ø–æ–ø—ã—Ç–∫–∞), —Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–º—É status = 'failed',
                // –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å 'Expired', —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ Redis,
                // –æ–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –º–µ—Ç–æ–¥–∞
                else if (waitPayments.stream().anyMatch(elem -> elem.getPaymentMethodId().equals(createPayment.getPaymentMethodId()) && elem.getTryCount() == 2)) {
                    logger.log(Level.SEVERE, "After second error autoPayment: Set Expired status for subscriber - {0} with paymentId - {1}", new Object[]{subscriber.getUserId(), subscriber.getPaymentId()});
                    // –í –ë–î –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å 'Expired' –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
                    subscriberOperations.updateSubscriptionInfo(subscriber.getUserId(), subscriber.getPaymentId(), dateFormat.format(Calendar.getInstance().getTime()), true);

                    // –ò–∑ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ Redis –Ω–µ —É–¥–∞–ª—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –ù–û–í–£–Æ Trial –ø–æ–¥–ø–∏—Å–∫—É
                    // –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ —Ä–∞—Å—Å—ã–ª–∫–µ, –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
                    // –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏" –∏ —Å–º–æ–∂–µ—Ç –µ–µ –æ—Ç–º–µ–Ω–∏—Ç—å
                    logger.log(Level.SEVERE, "After second error autoPayment: create Trial subscription for userId - {0} and equipmentType - {1}", new Object[]{subscriber.getUserId(), subscriber.getEquipmentType()});
                    subscriberOperations.addSubscriber(new Subscriber(subscriber.getUserId(), subscriber.getEquipmentType(), 0));

                    logger.log(Level.SEVERE, "After second error autoPayment: Set failed status for second error autoPayment - {0}", createPayment.getPaymentMethodId());
                    this.paymentOperations.setNewStatusForErrorAutoPayment(createPayment.getPaymentMethodId(), "failed", "wait");

                    general.sayAutoPaymentError(subscriber.getUserId(),
                            "‚ùóÔ∏è–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –ø–æ –í–∞—à–µ–π –∫–∞—Ä—Ç–µ –Ω–µ –ø—Ä–æ—à–µ–ª!\n\n" +
                                    "<b>–ü—Ä–∏—á–∏–Ω–∞:</b> " + payment.getCancellationDetails().getReason() + "\n\n" +
                                    "<b>–î–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–≤–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–∞–º –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∑–∞–Ω–æ–≤–æ.</b>");
                    return;
                }
            }

            logger.log(Level.SEVERE, "Payment status is canceled - {0}", gson.toJson(payment));
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—à–∏–±–æ—á–Ω–æ–º –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ –≤ –ë–î –≤ —Ç–∞–±–ª–∏—Ü—É ErrorPayments
            paymentOperations.addErrorPayment(createPayment.getPaymentMethodId(),
                    gson.toJson(createPayment),
                    true,
                    subscriber.getUserId(),
                    subscriber.getSubscriptionType(),
                    "canceled");

            // –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª –∏ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –µ—â–µ –¥–≤–µ –ø–æ–ø—ã—Ç–∫–∏: —á–µ—Ä–µ–∑ 2 –¥–Ω—è –∏ —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π
            general.sendMessageAboutCanceledAutoPayment(subscriber.getUserId(), payment.getCancellationDetails().getReason());
            return;
        }

        // –ü–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞.
        // –ï—Å–ª–∏ –ø—Ä–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å "pending" - –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å–∏—Å—Ç–µ–º—ã –ÆKassa.
        // –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ "succeeded" –∏ –≤ –¥–∞—Ç—É CapturedAt –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞—Ç—É CreatedAt.
        // –¢–∞–∫–∂–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–∞–Ω–∞–ª —Å–æ–æ–±—â–∞–µ–º –æ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–∏!
        if (payment.getStatus().equals("pending")) {
            admin.sendErrorMessagesToTechChannel("‚ùó–ü—Ä–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ –≤–µ—Ä–Ω—É–ª—Å—è —Å—Ç–∞—Ç—É—Å 'pending' –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ CapturedAt.\n–≠—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å–∏—Å—Ç–µ–º—ã –ÆKassa.\n–ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'succeeded' –∏ –≤ –¥–∞—Ç—É CapturedAt –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞—Ç—É CreatedAt.\npaymentId - " + payment.getId());
            payment.setStatus("succeeded");
            payment.setCapturedAt(payment.getCreatedAt());
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—à–∏–±–æ—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ "wait" –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ –Ω–∏—Ö
        // ID –ø–ª–∞—Ç–µ–∂–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–µ–π—á–∞—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ
        List<CreatePayment> waitPayments = paymentOperations.getErrorPaymentsByStatus("wait");
        if (waitPayments != null
                && !waitPayments.isEmpty()) {
            // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ (1-–∞—è –∏–ª–∏ 2-–∞—è –ø–æ–ø—ã—Ç–∫–∞), —Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–º—É status = 'success',
            // —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –º–µ—Ç–æ–¥–∞
            if (waitPayments.stream().anyMatch(elem -> elem.getPaymentMethodId().equals(createPayment.getPaymentMethodId())
                    && (elem.getTryCount() == 1 || elem.getTryCount() == 2))) {
                this.paymentOperations.setNewStatusForErrorAutoPayment(createPayment.getPaymentMethodId(), "success", "wait");
            }
        }

        payment.setUserId(subscriber.getUserId());

        Calendar nextBillCalendar = null;
        if (payment.getCapturedAt() != null && convertDate(payment.getCapturedAt()) != null) {
            nextBillCalendar = Calendar.getInstance();
            nextBillCalendar.setTime(convertDate(payment.getCapturedAt()));

            Subscription subscription = subscriptionOperations.getSubscriptionInfo(subscriber.getSubscriptionType(), subscriber.getEquipmentType());

            if (subscriber.getSubscriptionType().equals(SubscriptionType.week.value())) {
                nextBillCalendar.add(Calendar.WEEK_OF_MONTH, subscription.getDuration());
            } else if (subscriber.getSubscriptionType().equals(SubscriptionType.month.value())) {
                nextBillCalendar.add(Calendar.MONTH, subscription.getDuration());
            } else if (subscriber.getSubscriptionType().equals(SubscriptionType.year.value())) {
                nextBillCalendar.add(Calendar.YEAR, subscription.getDuration());
            } else if (subscriber.getSubscriptionType().equals(SubscriptionType.test.value())) {
                nextBillCalendar.add(Calendar.MINUTE, subscription.getDuration());
            }
            String nextBillDate = dateFormat.format(nextBillCalendar.getTime());
            logger.log(Level.INFO, "NextBillDate for auto payment - {0} is - {1}", new Object[]{payment.getId(), nextBillDate});
            payment.setNextBillDate(nextBillDate);
        } else {
            logger.log(Level.SEVERE, "Calendar is null for CapturedAt - {0}. Don't add info about next payment for auto payment with paymentId - {1}", new Object[]{payment.getCapturedAt(), payment.getId()});
            admin.sendErrorMessagesToTechChannel("‚ùóÔ∏è–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–£ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ CapturedAt –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É!".concat("\nJson response - " + createPaymentResponse));
        }

        //–ï—Å–ª–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ, —Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–¥–ø–∏—Å–∫—É —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
        logger.log(Level.SEVERE, "Payment is SUCCEEDED: Set Expired status for subscriber - {0} with paymentId - {1}", new Object[]{subscriber.getUserId(), subscriber.getPaymentId()});
        subscriberOperations.updateSubscriptionInfo(subscriber.getUserId(), subscriber.getPaymentId(), dateFormat.format(Calendar.getInstance().getTime()), true);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É Payments –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
        paymentOperations.addAutoPayment(payment, subscriber.getUserId());

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É Subscribers –Ω–æ–≤—É—é —Å—Ç—Ä–æ—á–∫—É —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –≤ —Å—Ç–∞—Ç—É—Å–µ 'Active'
        Subscriber subscriberAfterAutoPayment = new Subscriber(
                subscriber.getUserId(),
                payment.getId(),
                subscriber.getEmail(),
                subscriber.getSubscriptionType(),
                subscriber.getEquipmentType(),
                true
        );
        subscriberOperations.addSubscriberAfterAutoPayment(subscriberAfterAutoPayment, payment.getCapturedAt());

        // –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
        general.sendMessageAboutSuccessfullyAutoPayment(subscriberAfterAutoPayment.getUserId(), subscriber.getEquipmentType());

        // –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞, —Ç–æ —Å–æ–∑–¥–∞–µ–º —Ç–∞—Å–∫—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂
        if (nextBillCalendar != null
                && payment.getNextBillDate() != null
                && !payment.getNextBillDate().isEmpty()) {
            this.createAutoPayment(payment, nextBillCalendar);
        }
    }

    private void cleanUp(String chatId) {
        redisEntity.deleteElement(chatId.concat("_subscription"));
    }

    private InlineKeyboardMarkup getPaymentButton(String payUrl) {
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<InlineKeyboardButton> inlineKeyboardButtons = new ArrayList<>();

        InlineKeyboardButton inlineKeyboardButton = new InlineKeyboardButton();
        inlineKeyboardButton.setText("üí∞–û–ø–ª–∞—Ç–∏—Ç—å");
        inlineKeyboardButton.setUrl(payUrl);
        inlineKeyboardButtons.add(inlineKeyboardButton);

        List<List<InlineKeyboardButton>> listOfListInlineKey = new ArrayList<>();
        listOfListInlineKey.add(inlineKeyboardButtons);
        inlineKeyboardMarkup.setKeyboard(listOfListInlineKey);

        return inlineKeyboardMarkup;
    }

    private Date convertDate(String utcDate) {

        logger.log(Level.INFO, "Input utcDate - {0}", utcDate);
        if (utcDate == null) {
            logger.log(Level.INFO, "Don't converting date, because value is null...");
            return null;
        }

        try {
            utcFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
            Date date = utcFormat.parse(utcDate);
            dateFormat.setTimeZone(TimeZone.getTimeZone("Europe/Moscow"));

            Date europeDate = dateFormat.parse(dateFormat.format(date));
            logger.log(Level.INFO, "Converted Date - {0}", europeDate);

            return europeDate;
        } catch (ParseException ex) {
            logger.log(Level.SEVERE, null, ex);
        }
        return null;
    }
}
