package ru.builder.bean.general;

import com.google.gson.Gson;
import org.telegram.telegrambots.meta.api.methods.ParseMode;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardRemove;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.exceptions.TelegramApiRequestException;
import ru.builder.bean.firebase.Firebase;
import ru.builder.bot.BuilderBot;
import ru.builder.db.connection.ConnectionOperations;
import ru.builder.db.dictionary.DictionaryOperations;
import ru.builder.db.document.DocumentOperations;
import ru.builder.db.order.OrderInfoOperations;
import ru.builder.db.payment.PaymentOperations;
import ru.builder.db.subscriber.SubscriberOperations;
import ru.builder.db.subscription.SubscriptionOperations;
import ru.builder.model.document.Document;
import ru.builder.model.order.*;
import ru.builder.model.payment.Payment;
import ru.builder.model.payment.error.ErrorPayment;
import ru.builder.model.subscr.Subscriber;
import ru.builder.model.subscr.Subscription;
import ru.builder.model.subscr.SubscriptionType;
import ru.builder.redis.RedisEntity;

import javax.annotation.Resource;
import javax.ejb.Stateless;
import javax.enterprise.inject.Default;
import javax.inject.Inject;
import javax.jms.*;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;

@Default
@Stateless
public class GeneralBean implements General {

    private final Logger logger = Logger.getLogger(this.getClass().getName());
    private final ScheduledExecutorService executorService = Executors.newScheduledThreadPool(5);
    private final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

    @Inject
    private Firebase firebase;
    @Inject
    private DocumentOperations documentOperations;
    @Inject
    private DictionaryOperations dictionaryOperations;
    @Inject
    private OrderInfoOperations orderInfoOperations;
    @Inject
    private SubscriptionOperations subscriptionOperations;
    @Inject
    private SubscriberOperations subscriberOperations;
    @Inject
    private ConnectionOperations connectionOperations;
    @Inject
    private RedisEntity redisEntity;
    @Inject
    private PaymentOperations paymentOperations;

    @Inject
    @JMSConnectionFactory("java:/QueueConnectionFactory")
    private JMSContext context;
    @Resource(mappedName = "java:jboss/exported/jms/queue/ordersQueue")
    private Destination ordersQueue;
    @Resource(mappedName = "java:jboss/exported/jms/queue/secondQueue")
    private Destination secondQueue;
    @Resource(mappedName = "java:jboss/exported/jms/queue/thirdQueue")
    private Destination thirdQueue;
    @Resource(mappedName = "java:jboss/exported/jms/queue/fourthQueue")
    private Destination fourthQueue;
    @Resource(mappedName = "java:jboss/exported/jms/queue/fifthQueue")
    private Destination fifthQueue;
    @Resource(mappedName = "java:jboss/exported/jms/queue/sixthQueue")
    private Destination sixthQueue;
    @Resource(mappedName = "java:jboss/exported/jms/queue/seventhQueue")
    private Destination seventhQueue;
    @Resource(mappedName = "java:jboss/exported/jms/queue/eighthQueue")
    private Destination eighthQueue;

    @Override
    public void sendStartMessage(String userId) {

        boolean isAdmin = redisEntity.getElements("builder_admins") != null
                && !redisEntity.getElements("builder_admins").isEmpty()
                && redisEntity.getElements("builder_admins").contains(userId);

        if (isAdmin)
            redisEntity.setElement(userId.concat("_isAdmin"), "true");

        try {
            String text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –°—Ç—Ä–æ–∏—Ç–µ–ª—å! üöú\n\n" +
                    "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã –Ω–∞ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –ú–æ—Å–∫–≤–µ –∏ –ú–û.\n" +
                    "–î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –≤ –±–æ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º [–°—Ç—Ä–æ–∏—Ç–µ–ª—å](https://play.google.com/store/apps/details?id=com.builders)\n\n" +
                    "*–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:*\n" +
                    "1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É *–í—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É*\n" +
                    "2. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–µ\n\n" +
                    "–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É.\n" +
                    "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ - –±–æ—Ç —Å–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤–∞–º –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É. –ü—Ä–æ—Å—Ç–æ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n\n" +
                    "*–ö–Ω–æ–ø–∫–∏:*\n" +
                    "‚è∫Ô∏è*–í—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É* - –í—ã–±–æ—Ä —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã\n" +
                    "‚è∫Ô∏è*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏* - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–µ–∫—É—â–∏–º –ø–æ–¥–ø–∏—Å–∫–∞–º: –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ–ª-–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, –¥–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∏ —Ç–¥\n" +
                    "‚è∫Ô∏è*–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º* - –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã \n" +
                    "‚è∫Ô∏è*–ü–æ–º–æ—â—å* - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏";

            new BuilderBot().execute(SendMessage.builder()
                    .chatId(userId)
                    .text(text
                            .replaceAll("\\!", "\\\\!")
                            .replaceAll("\\.", "\\\\.")
                            .replaceAll("\\-", "\\\\-")
                            .replaceAll("\\=", "\\\\=")
                    )
                    .parseMode(ParseMode.MARKDOWNV2)
                    .disableWebPagePreview(true)
                    .replyMarkup(getMainMenuButton())
                    .build());
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }

        logger.log(Level.SEVERE, "Restoring subscriptions for userId - {0}", userId);

        // ==> –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–±–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –±–æ—Ç–∞
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–∞—Ç—É—Å 'Pause'
        List<Subscriber> pauseSubscribers = subscriberOperations.getPauseSubscriptions(userId);

        // –ï—Å–ª–∏ —Ç–∞–∫–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –µ—Å—Ç—å, —Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö
        if (pauseSubscribers != null && !pauseSubscribers.isEmpty()) {
            // –ü—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∫–∞–º
            pauseSubscribers.forEach(pauseSubscriber -> {
                // –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–µ –≤ –ë–î —Å—Ç–∞—Ç—É—Å 'Trial'
                subscriberOperations.restoreTrialStatusForSubscription(pauseSubscriber);
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞—Å—Å—ã–ª–∫—É (–≤ Redis) –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏
                this.redisEntity.pushElement(pauseSubscriber.getEquipmentType(), userId);
            });
            logger.log(Level.SEVERE, "Restored {0} trial subscriptions for userId - {1}", new Object[]{pauseSubscribers.size(), userId});
        }

        // ==> –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –±–æ—Ç–∞
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ (–ø–ª–∞—Ç–Ω—ã–µ) –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å
        List<Subscriber> activeSubscribers = this.subscriberOperations.getAllActiveSubscribers();
        if (activeSubscribers != null && !activeSubscribers.isEmpty()) {
            // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            activeSubscribers.removeIf(elem -> !elem.getUserId().equals(userId));
            // –ü—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∫–∞–º
            activeSubscribers.forEach(activeSubscriber -> {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞—Å—Å—ã–ª–∫—É (–≤ Redis) –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏
                this.redisEntity.pushElement(activeSubscriber.getEquipmentType(), userId);
            });
            logger.log(Level.SEVERE, "Restored {0} paid subscriptions for userId - {1}", new Object[]{activeSubscribers.size(), userId});
        }
    }

    @Override
    public void sendLostUserMessage(String userId) {
        try {
            String text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –°—Ç—Ä–æ–∏—Ç–µ–ª—å! üöú\n\n" +
                    "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã –Ω–∞ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –ú–æ—Å–∫–≤–µ –∏ –ú–û.\n" +
                    "–î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –≤ –±–æ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º [–°—Ç—Ä–æ–∏—Ç–µ–ª—å](https://play.google.com/store/apps/details?id=com.builders)\n\n" +
                    "*–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:*\n" +
                    "1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É *–í—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É*\n" +
                    "2. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–µ\n\n" +
                    "–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É.\n" +
                    "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ - –±–æ—Ç —Å–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤–∞–º –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É. –ü—Ä–æ—Å—Ç–æ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n\n" +
                    "*–ö–Ω–æ–ø–∫–∏:*\n" +
                    "‚è∫Ô∏è*–í—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É* - –í—ã–±–æ—Ä —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã\n" +
                    "‚è∫Ô∏è*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏* - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–µ–∫—É—â–∏–º –ø–æ–¥–ø–∏—Å–∫–∞–º: –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ–ª-–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, –¥–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∏ —Ç–¥\n" +
                    "‚è∫Ô∏è*–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º* - –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã \n" +
                    "‚è∫Ô∏è*–ü–æ–º–æ—â—å* - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏";

            new BuilderBot().execute(SendMessage.builder()
                    .chatId(userId)
                    .text(text
                            .replaceAll("\\!", "\\\\!")
                            .replaceAll("\\.", "\\\\.")
                            .replaceAll("\\-", "\\\\-")
                            .replaceAll("\\=", "\\\\=")
                    )
                    .parseMode(ParseMode.MARKDOWNV2)
                    .disableWebPagePreview(true)
                    .replyMarkup(getMainMenuButton())
                    .build());
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
    }

    @Override
    public void sendMainMenuMessage(String userId) {
        String text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é!üöú\n\n" +
                "*–ö–Ω–æ–ø–∫–∏:*\n" +
                "‚è∫Ô∏è*–í—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É* - –í—ã–±–æ—Ä —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã\n" +
                "‚è∫Ô∏è*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏* - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–µ–∫—É—â–∏–º –ø–æ–¥–ø–∏—Å–∫–∞–º: –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ–ª-–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, –¥–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∏ —Ç–¥\n" +
                "‚è∫Ô∏è*–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º* - –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã \n" +
                "‚è∫Ô∏è*–ü–æ–º–æ—â—å* - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n\n" +
                "*–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é*";

        try {
            new BuilderBot().execute(SendMessage.builder()
                    .chatId(userId)
                    .text(text
                            .replaceAll("\\!", "\\\\!")
                            .replaceAll("\\.", "\\\\.")
                            .replaceAll("\\-", "\\\\-")
                            .replaceAll("\\=", "\\\\=")
                    )
                    .parseMode(ParseMode.MARKDOWNV2)
                    .replyMarkup(getOptionButtons(userId))
                    .build());
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
    }

    @Override
    public void getNewOrders() {
        logger.log(Level.SEVERE, "START getNewOrders ...");

        List<Document> orders = firebase.getOrderInfo();

        if (orders == null) {
            logger.log(Level.SEVERE, "orders is null! STOP getNewOrders transaction ...");
            return;
        }

        orders.forEach(document -> {

            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –∑–∞–∫–∞–∑–µ.
            // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∞–∫–æ–π –∑–∞–∫–∞–∑.
            if (document.getFields().getUserPhone().getStringValue() == null || document.getFields().getUserPhone().getStringValue().isEmpty()) {
                logger.log(Level.SEVERE, "Skipping documentId - {0}, because phone number is absent", document.getFields().getId().getStringValue());
                return;
            }

            // –ï—Å–ª–∏ –≤ –∑–∞–∫–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∞–∫–æ–π –∑–∞–∫–∞–∑
            if (document.getFields().getComment().getStringValue() == null || document.getFields().getComment().getStringValue().isEmpty()) {
                logger.log(Level.SEVERE, "Skipping documentId - {0}, because Comment is null", document.getFields().getId().getStringValue());
                return;
            }

            // ==> –î–µ–ª–∞–µ–º –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–∫—É –æ—Ç –ø–æ–≤—Ç–æ—Ä–æ–∫ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π:
            // –ï—Å–ª–∏ –¥–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ (createdAt) –º–µ–Ω—å—à–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ –ë–î –±–æ—Ç–∞ (lastOrderTime –≤ Redis) - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –∑–∞–∫–∞–∑
            if (redisEntity.getElement("lastOrderTime") != null) {
                long lastOrderTime = Long.parseLong(redisEntity.getElement("lastOrderTime"));
                long currentOrderTime = Timestamp.valueOf(document.getFields().getCreatedAt().getTimestampValue()).getTime();
                if (currentOrderTime < lastOrderTime) {
                    logger.log(Level.SEVERE, "currentOrderTime - {0} < lastOrderTime - {1}, skip document - {2}", new Object[]{currentOrderTime, lastOrderTime, document.getFields().getId().getStringValue()});
                    return;
                }
            }

            String documentId = document.getFields().getId().getStringValue();
            // –ï—Å–ª–∏ –≤ –ë–î —É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–æ–π ID –¥–æ–∫—É–º–µ–Ω—Ç–∞, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
            if (documentOperations.checkDocumentId(documentId)) {
                return;
            }
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            documentOperations.addDocument(document);
        });
        logger.log(Level.SEVERE, "STOP getNewOrders ...");
    }

    @Override
    public void putOrdersToQueue() {
        logger.log(Level.SEVERE, "START putOrdersToQueue ...");

        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –ë–î, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        // –ó–∞–ø—Ä–æ—Å –¥–µ–ª–∞–µ–º —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π "–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º", —á—Ç–æ–±—ã —Å–æ–±–ª—é—Å—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
        List<Document> orders = this.documentOperations.getFirstTwoNotProcessedDocuments();
        // –ü–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î (—Ç–∞–±–ª–∏—Ü–∞ order_info) –≤—Å–µ ID –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        List<String> uniqueDocumentIds = this.orderInfoOperations.getAllUniqueDocumentIds();
        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (uniqueDocumentIds != null && !uniqueDocumentIds.isEmpty())
            orders.removeIf(order -> uniqueDocumentIds.contains(order.getFields().getId().getStringValue()));

        // –ü–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î Firebase –≤—Å–µ –≤–∏–¥—ã —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏
        // –í –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø–æ ID –±—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å –∏–º—è —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –Ω–µ –¥–µ—Ä–≥–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ Firebase!
        List<Document> heavyTypes = firebase.getAllHeavyMachineryName();

        orders.forEach(document -> {
            String documentId = document.getFields().getId().getStringValue();

            // –ü–æ–º–µ—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
            this.documentOperations.markDocumentAsProcessed(documentId);

            // ===> –î–æ—Å—Ç–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞
            String equipmentId = document.getFields().getTypeID().getStringValue();
            // –î–æ—Å—Ç–∞–µ–º –∏–º—è —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏ –ø–æ –µ–µ ID –∏–∑ —Å–ø–∏—Å–∫–∞ heavyTypes
            Document doc = heavyTypes.stream().filter(heavyType -> heavyType.getFields().getId().getStringValue().equals(equipmentId)).findFirst().orElse(null);
            String equipmentName = doc != null ? doc.getFields().getName().getStringValue() : "";

            String latitude = document.getFields().getLocation().getGeoPoint().getLatitude();
            String longitude = document.getFields().getLocation().getGeoPoint().getLongitude();
            String google_maps = "<a href=\"".concat("https://www.google.com/maps/place/").concat(latitude).concat(",").concat(longitude).concat("\">")
                    .concat("Google –∫–∞—Ä—Ç—ã")
                    .concat("</a>");
            String yandex_maps = "<a href=\"".concat("https://maps.yandex.ru/?text=").concat(latitude).concat(",").concat(longitude).concat("\">")
                    .concat("–Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã")
                    .concat("</a>");
            String mapInfo = yandex_maps.concat("\n").concat(google_maps);
            String paymentMethod;
            switch (document.getFields().getPaymentMethod().getStringValue()) {
                case "bank":
                    paymentMethod = "–ë–µ–∑–Ω–∞–ª";
                    break;
                case "cash":
                    paymentMethod = "–ù–∞–ª";
                    break;
                default:
                    paymentMethod = "–õ—é–±–æ–π";
                    break;
            }

            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç–µ–∫—É—â–∏–π —Ç–∏–ø —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏
            List<String> userIds = redisEntity.getElements(equipmentId);
            if (userIds == null || userIds.isEmpty())
                return;

            logger.log(Level.INFO, "users - {0} for typeId - {1}", new Object[]{Arrays.toString(userIds.toArray()), equipmentId});

            ObjectMessage msg = context.createObjectMessage();
            JMSProducer producer = context.createProducer();

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            Order order = new Order(documentId,
                    document.getFields().getCreatedAt().getTimestampValue(),
                    document.getFields().getComment().getStringValue(),
                    paymentMethod,
                    new Equipment(equipmentId, equipmentName),
                    new User(document.getFields().getUserName().getStringValue(), document.getFields().getUserPhone().getStringValue()),
                    new Location(document.getFields().getAddress().getStringValue(), mapInfo));

            userIds.forEach(id -> {
                // ===> –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
                try {
                    msg.setStringProperty("userId", id);
                    msg.setObject(order);
                    int queueId = new Random().nextInt(8);

                    if (queueId == 0) {
                        logger.log(Level.INFO, "Send message to ordersQueue ...");
                        producer.send(ordersQueue, msg);
                    } else if (queueId == 1) {
                        logger.log(Level.INFO, "Send message to secondQueue ...");
                        producer.send(secondQueue, msg);
                    } else if (queueId == 2) {
                        logger.log(Level.INFO, "Send message to thirdQueue ...");
                        producer.send(thirdQueue, msg);
                    } else if (queueId == 3) {
                        logger.log(Level.INFO, "Send message to fourthQueue ...");
                        producer.send(fourthQueue, msg);
                    } else if (queueId == 4) {
                        logger.log(Level.INFO, "Send message to fifthQueue ...");
                        producer.send(fifthQueue, msg);
                    } else if (queueId == 5) {
                        logger.log(Level.INFO, "Send message to sixthQueue ...");
                        producer.send(sixthQueue, msg);
                    } else if (queueId == 6) {
                        logger.log(Level.INFO, "Send message to seventhQueue ...");
                        producer.send(seventhQueue, msg);
                    } else if (queueId == 7) {
                        logger.log(Level.INFO, "Send message to eighthQueue ...");
                        producer.send(eighthQueue, msg);
                    }

                } catch (JMSException e) {
                    logger.log(Level.SEVERE, null, e.getMessage());
                }
            });
        });
        logger.log(Level.SEVERE, "STOP putOrdersToQueue ...");
    }

    @Override
    public void sendOrderToUser(Order order, String userId) {
        logger.log(Level.INFO, "START sendOrderToUser for documentId - {0} and userId - {1} ...", new Object[]{order.getDocumentId(), userId});
        // –î–ª—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å–ª–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ (–ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ) –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±—É–¥–µ—Ç —Å—Ä–∞–∑—É –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ
        // –¢–ê–ö–ñ–ï –∑–∞–∫–∞–∑—ã —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –æ–∂–∏–¥–∞—é—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂
        // –ü—Ä–∏–º–µ—Ä: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å, –Ω–æ –µ–º—É –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –∂–¥–∞—Ç—å 2/3 –¥–Ω—è, –ø–æ—ç—Ç–æ–º—É –æ–Ω –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        // –í –º–µ—Ç–æ–¥ checkIsActiveSubscriber –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å 'AutoPay'
        boolean isActiveSubscr = subscriberOperations.checkIsActiveSubscriber(userId, order.getEquipment().getId());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        boolean isAdmin = redisEntity.getElements("builder_admins") != null
                && !redisEntity.getElements("builder_admins").isEmpty()
                && redisEntity.getElements("builder_admins").contains(userId);

        String user = order.getUser().getName()
                .replaceAll("<", "")
                .replaceAll(">", "");

        String comment = order.getComment()
                .replaceAll("<", "")
                .replaceAll(">", "");

        String additionalText = "<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> " + comment + "\n\n";
        if (isAdmin) {
            additionalText = "<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> " + comment + "\n" +
                    "<b>–ê–¥—Ä–µ—Å:</b> " + order.getLocation().getAddress() + "\n\n";
        }

        String text = "<b>–ó–∞–∫–∞–∑ –Ω–∞ " + order.getEquipment().getName() + "</b>\n\n" +
                "<b>–î–∞—Ç–∞:</b> " + order.getCreatedAt() + "\n" +
                "‚ùóÔ∏è–ß–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, —Ç–µ–º –±–æ–ª—å—à–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ –æ–Ω —É–∂–µ –∑–∞–∫—Ä—ã—Ç\n" +
                "<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> " + order.getPaymentMethod() + "\n" +
                "<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> " + user + "\n\n" +
                additionalText +
                "<b>–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∞—Ö:</b> " + "\n" + order.getLocation().getMapInfo() + "\n" +
                "<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ, —É—Ç–æ—á–Ω–∏—Ç–µ –µ–≥–æ —É –∑–∞–∫–∞–∑—á–∏–∫–∞\n</b>" +
                (isActiveSubscr ? "\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>" + order.getUser().getPhone().concat("\n\n‚ùóÔ∏è–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, —Ç–µ–º –±–æ–ª—å—à–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ –æ–Ω —É–∂–µ –∑–∞–∫—Ä—ã—Ç.") : "");

        SendMessage sendMessage = SendMessage.builder()
                .chatId(userId)
                .text(text)
                .replyMarkup(getShowPhoneButton(isActiveSubscr))
                .parseMode(ParseMode.HTML)
                .disableWebPagePreview(true)
                .build();
        try {
            Message message = new BuilderBot().execute(sendMessage);
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ chatId + documentId + messageId
            orderInfoOperations.addTmpInfo(new OrderInfo(userId, order.getDocumentId(), String.valueOf(message.getMessageId())), order.getCreatedAt());
        } catch (TelegramApiException ex) {

            if (ex.getMessage().equals("Unable to execute sendMessage method")) {
                logger.log(Level.SEVERE, "ExceptionMessage - {0}, Repeat sending for userId - {1}", new Object[]{ex.getMessage(), userId});
                executorService.schedule(() -> this.sendOrderToUser(order, userId), 10, TimeUnit.SECONDS);
                return;
            }

            if (ex instanceof TelegramApiRequestException) {
                if (((TelegramApiRequestException) ex).getErrorCode() != null) {

                    if (((TelegramApiRequestException) ex).getErrorCode() == 403
                            && (ex.getMessage().contains("blocked by the user")
                            || ex.getMessage().contains("user is deactivated"))) {
                        logger.log(Level.SEVERE, "ErrorCode 403 - {0}. Removing the userId - {1} from Redis and canceling Trial subscription for subscriber... ", new Object[]{ex.getMessage(), userId});
                        // –í Redis —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞ —Å–ø–µ—Ü–∏–µ—Ö–Ω–∏–∫–∏, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –ø–æ–ª—É—á–∞–ª –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
                        redisEntity.remElement(order.getEquipment().getId(), userId);
                        // –í –ë–î –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ 'Pause'
                        // –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º —Å–º–æ–∂–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç—É –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –≤ –±–æ—Ç–∞
                        subscriberOperations.cancelTrialSubscription(userId, order.getEquipment().getId(), true);
                        return;
                    }

                    if (((TelegramApiRequestException) ex).getErrorCode() == 429) {
                        logger.log(Level.SEVERE, "ErrorCode 429 - {0}. Create schedule task for repeat sending message: retry - {1} sec to userId - {2}", new Object[]{ex.getMessage(), ((TelegramApiRequestException) ex).getParameters().getRetryAfter(), userId});
                        executorService.schedule(() -> this.sendOrderToUser(order, userId), ((TelegramApiRequestException) ex).getParameters().getRetryAfter(), TimeUnit.SECONDS);
                        return;
                    }
                }
            }
            logger.log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            logger.log(Level.SEVERE, "Unexpected Error: ", ex);
        }
        logger.log(Level.INFO, "STOP sendOrderToUser for documentId - {0} and userId - {1} ...", new Object[]{order.getDocumentId(), userId});
    }

    @Override
    public void getChoiceHeavyMachineryTypes(String userId) {
        SendMessage sendMessage = SendMessage.builder()
                .chatId(userId)
                .text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã")
                .replyMarkup(getHeavyMachineryTypeButtons())
                .build();
        try {
            new BuilderBot().execute(sendMessage);
        } catch (TelegramApiException ex) {
            logger.log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void sendMessageAboutChoice(String userId, String heavyMachineryType) {
        // –î–æ—Å—Ç–∞–µ–º –∏–∑ –ë–î Firebase –∏–º—è —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∫–∏
        String heavyMachineryName = firebase.getHeavyMachineryNameById(heavyMachineryType);
        SendMessage sendMessage = SendMessage.builder()
                .chatId(userId)
                .text("‚ùóÔ∏è–¢–µ–ø–µ—Ä—å –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–µ <b>" + heavyMachineryName + "</b>")
                .parseMode(ParseMode.HTML)
                .replyMarkup(getMainMenuButton())
                .build();
        try {
            new BuilderBot().execute(sendMessage);
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è Telegram
     
    @Override
    public void sendMessageAboutUpdateSubscriptionforTelegram(String userId) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ê–∫—Ç–∏–≤–Ω–æ–π –∏–ª–∏ –¢—Ä–∏–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Subscriber subscriberInfo = subscriberOperations.getSubscriberByIdAndEquipmentTypeAndActiveOrAutoPayStatus(userId, emailSubscriber);
        // –ü–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¢–∏–ø—É —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏
        String text = """
            ‚ùóÔ∏è–£–≤–µ–¥–æ–º–ª—è–µ–º –≤–∞—Å –æ –Ω–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ.
            –í—ã –º–æ–∂–µ—Ç–µ –æ–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' –∑–∞—Ç–µ–º '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏'
            """;
        SendMessage sendMessage = SendMessage.builder()
                .chatId(userId)
                .text(text)
                .parseMode(ParseMode.HTML)
                .replyMarkup(getMainMenuButton())
                .build();
        try {
            new BuilderBot().execute(sendMessage);
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
    }
    */

    private ReplyKeyboardMarkup getMainMenuButton() {
        return ReplyKeyboardMarkup.builder()
                .keyboardRow(new KeyboardRow(
                        Collections.singletonList(
                                new KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üéØ")
                        )))
                .resizeKeyboard(true)
                .build();
    }

    private InlineKeyboardMarkup getOptionButtons(String userId) {

        boolean isAdmin = redisEntity.getElement(userId.concat("_isAdmin")) != null
                && !redisEntity.getElement(userId.concat("_isAdmin")).isEmpty()
                && redisEntity.getElement(userId.concat("_isAdmin")).equals("true");

        return InlineKeyboardMarkup.builder()
                .keyboardRow(Collections.singletonList(
                        InlineKeyboardButton.builder()
                                .text("–í—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É üöú")
                                .callbackData("choose_machine")
                                .build()
                ))
                .keyboardRow(Collections.singletonList(
                        InlineKeyboardButton.builder()
                                .text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ üì¨")
                                .callbackData("sub_management")
                                .build()
                ))
                .keyboardRow(Collections.singletonList(
                        InlineKeyboardButton.builder()
                                .text("–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º ‚úèÔ∏è")
                                .callbackData("support")
                                .build()
                ))
                .keyboardRow(Collections.singletonList(
                        InlineKeyboardButton.builder()
                                .text("–ü–æ–º–æ—â—å ‚ÑπÔ∏èÔ∏è")
                                .callbackData("help")
                                .build()
                ))
                .keyboardRow(isAdmin
                        ? Collections.singletonList(
                        InlineKeyboardButton.builder()
                                .text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä")
                                .callbackData("statistic")
                                .build())
                        : new ArrayList<>()
                )
                .build();
    }

    @Override
    public boolean checkSubscriptionForUserId(String userId, String heavyMachineryType) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ê–∫—Ç–∏–≤–Ω–æ–π –∏–ª–∏ –¢—Ä–∏–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Subscriber subscriberInfo = subscriberOperations.getActiveOrTrialSubscriberByIdAndEquipmentType(userId, heavyMachineryType);
        // –î–æ—Å—Ç–∞–µ–º –∏–∑ –ë–î Firebase –∏–º—è —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∫–∏
        String heavyMachineryName = firebase.getHeavyMachineryNameById(heavyMachineryType);
        // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∏–º–µ–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ - —Ç–æ —Å–æ–æ–±—â–∞–µ–º –µ–º—É –æ–± —ç—Ç–æ–º
        if (subscriberInfo != null) {
            SendMessage sendMessage = SendMessage.builder()
                    .chatId(userId)
                    .text("‚ùóÔ∏è–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑–∞–º –¥–ª—è —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏ <b>" + heavyMachineryName + "</b>")
                    .parseMode(ParseMode.HTML)
                    .build();
            try {
                new BuilderBot().execute(sendMessage);
            } catch (TelegramApiException e) {
                logger.log(Level.SEVERE, null, e);
            }
        }
        return subscriberInfo != null;
    }

    private void sendMessageAboutTheOrderWasClosed(String userId, Integer messageId) {
        logger.log(Level.SEVERE, "Edit message (show_phone): userId - {0}, messageId - {1}", new Object[]{userId, messageId});
        try {
            new BuilderBot().execute(
                    EditMessageText.builder()
                            .chatId(Long.valueOf(userId))
                            .text("–°—Ä–æ–∫ –¥–∞–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ –∏—Å—Ç–µ–∫ üòî")
                            .messageId(messageId)
                            .build()
            );
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, "Failed to edit old message - {0}", e.getMessage());
        }
    }

    @Override
    public void showPhoneNumber(String userId, Integer messageId, String text) {

        try {
            // –ü–æ chatId –∏ messageId –ø–æ–ª—É—á–∞–µ–º id –¥–æ–∫—É–º–µ–Ω—Ç–∞
            String documentId = orderInfoOperations.getDocumentIdByChatIdAndMessageId(userId, String.valueOf(messageId));

            // –ï—Å–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ —Å –∑–∞–∫–∞–∑–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–∏,
            // –∑–Ω–∞—á–∏—Ç —ç—Ç–æ—Ç –∑–∞–∫–∞–∑ –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–ª–∏ –≤—Ä—É—á–Ω—É—é —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –Ω–µ–∞–∫—É—Ç–∞–ª–µ–Ω.
            // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º, –≥–æ–≤–æ—Ä–∏–º, —á—Ç–æ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –∑–∞–∫–∞–∑–∞
            if (documentId == null || documentId.isEmpty()) {
                this.sendMessageAboutTheOrderWasClosed(userId, messageId);
                return;
            }

            // –ü–æ documentId –¥–æ—Å—Ç–∞–µ–º –∏–Ω—Ñ—É –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É
            Document document = documentOperations.getDocumentById(documentId);
            if (document == null) {
                logger.log(Level.SEVERE, "Document with id - {0} is null!", documentId);
                return;
            }

            String equipmentId = document.getFields().getTypeID().getStringValue();
            int connectionCount = 0;

            // –ü–æ–ª—É—á–∞–µ–º –∏–∑ Redis –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –∏–º–µ—é—Ç—Å—è
            if (redisEntity.hashGet(userId, equipmentId.concat("_connectionCount")) != null
                    && !redisEntity.hashGet(userId, equipmentId.concat("_connectionCount")).isEmpty()) {
                logger.log(Level.SEVERE, "Get connectionCount value from Redis...");
                connectionCount = Integer.parseInt(redisEntity.hashGet(userId, equipmentId.concat("_connectionCount")));
            }

            // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –≤ –∫—ç—à–µ (Redis) –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–ª–∏–∫–∏ –ø–æ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–µ,
            // –ù–û –ø—Ä–∏ —ç—Ç–æ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –∫–ª–∏–∫–æ–≤ –¥–ª—è —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏ –ø–æ–º–µ–Ω—è–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∞ —Å—Ç–∞–ª–∞ –ø–ª–∞—Ç–Ω–æ–π),
            // —Ç–æ –∑–∞–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ–ª-–≤–æ –∫–ª–∏–∫–æ–≤ —Ä–∞–≤–Ω–æ–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏
            // + –≤ –∫—ç—à–µ (Redis) –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            if (connectionCount != 0) {
                int actualConnectionCountByEquipmentType = connectionOperations.getCountOfConnectionsByEquipmentType(equipmentId);
                if (connectionCount > actualConnectionCountByEquipmentType) {
                    connectionCount = actualConnectionCountByEquipmentType;
                    redisEntity.hashSet(userId, equipmentId.concat("_connectionCount"), String.valueOf(connectionCount));
                }
            }

            // –ü–æ—Å–ª–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ (–ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ) –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤
            boolean isActiveSubscr = subscriberOperations.checkIsActiveSubscriber(userId, equipmentId);

            // –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –¥–æ–ª–≥–æ—Ç—É –∏ —à–∏—Ä–æ—Ç—É
            String latitude = document.getFields().getLocation().getGeoPoint().getLatitude();
            String longitude = document.getFields().getLocation().getGeoPoint().getLongitude();

            String google_maps = "<a href=\"".concat("https://www.google.com/maps/place/").concat(latitude).concat(",").concat(longitude).concat("\">")
                    .concat("Google –∫–∞—Ä—Ç—ã")
                    .concat("</a>");
            String yandex_maps = "<a href=\"".concat("https://maps.yandex.ru/?text=").concat(latitude).concat(",").concat(longitude).concat("\">")
                    .concat("–Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã")
                    .concat("</a>");
            String mapInfo = yandex_maps.concat("\n").concat(google_maps);

            // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 0 –∫–æ–Ω–Ω–µ–∫—Ç–æ–≤, –Ω–æ –æ–Ω –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–º–µ—Ä, —Ç–æ –≤—ã–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ —Å–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
            if (!isActiveSubscr && connectionCount == 0) {
                SendMessage sendMessage = SendMessage.builder()
                        .chatId(userId)
                        .text("‚ùóÔ∏è–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –í–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥!\n" +
                                "–î–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–≤–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–∞–º –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏ <b>" + firebase.getHeavyMachineryNameById(equipmentId) + "</b>\n\n" +
                                "‚ùóÔ∏è–û–±—Ä–∞—â–∞—é –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ —É –≤–∞—Å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏.\n" +
                                "–î–ª—è –æ—Ç–º–µ–Ω—ã –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ü–ò–°–ö–ê–ú–ò</b> –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —É –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂.")
                        .replyMarkup(getSubscriptionButtons(equipmentId, userId))
                        .parseMode(ParseMode.HTML)
                        .build();
                try {
                    new BuilderBot().execute(sendMessage);
                } catch (TelegramApiException e) {
                    logger.log(Level.SEVERE, null, e);
                }
                return;
            }

            // –ï—Å–ª–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Å—Ç–∞–ª–æ—Å—å –±–æ–ª–µ–µ 20 –∫–æ–Ω–Ω–µ–∫—Ç–æ–≤, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ—Ç —Ç–∏–ø —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π
            // –î–ª—è –Ω–µ–µ –ù–ï –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–ª-–≤–æ –∫–æ–Ω–Ω–µ–∫—Ç–æ–≤ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞.
            boolean isFreeSubscription = connectionCount > 20;

            String userPhone = document.getFields().getUserPhone().getStringValue();
            String message = text
                    .replaceAll("–ó–∞–∫–∞–∑ –Ω–∞", "<b>–ó–∞–∫–∞–∑ –Ω–∞</b>")
                    .replaceAll("–î–∞—Ç–∞:", "<b>–î–∞—Ç–∞:</b>")
                    .replaceAll("–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", "<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>")
                    .replaceAll("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:", "<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>")
                    .replaceAll("–ê–¥—Ä–µ—Å:", "<b>–ê–¥—Ä–µ—Å:</b>")
                    .replaceAll("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", "<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>")
                    .replaceAll("–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∞—Ö:", "<b>–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∞—Ö:</b>")
                    .replaceAll("–Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã\nGoogle –∫–∞—Ä—Ç—ã", mapInfo)
                    .replaceAll("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ, —É—Ç–æ—á–Ω–∏—Ç–µ –µ–≥–æ —É –∑–∞–∫–∞–∑—á–∏–∫–∞", "<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ, —É—Ç–æ—á–Ω–∏—Ç–µ –µ–≥–æ —É –∑–∞–∫–∞–∑—á–∏–∫–∞</b>")
                    .concat(!isActiveSubscr && !isFreeSubscription ? "\n\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> " + userPhone + "\n<b>–û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:</b> " + (connectionCount - 1) : "\n\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> " + userPhone)
                    .concat("\n\n‚ùóÔ∏è–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, —Ç–µ–º –±–æ–ª—å—à–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ –æ–Ω —É–∂–µ –∑–∞–∫—Ä—ã—Ç.");

            try {
                new BuilderBot().execute(
                        EditMessageText.builder()
                                .chatId(userId)
                                .text(message)
                                .messageId(messageId)
                                .parseMode(ParseMode.HTML)
                                .disableWebPagePreview(true)
                                .replyMarkup(getShowMainMenuButton())
                                .build());
            } catch (TelegramApiException e) {
                logger.log(Level.SEVERE, null, e);
            }
            // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î –∫–æ–ª-–≤–æ –∫–æ–Ω–Ω–µ–∫—Ç–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
            if (!isActiveSubscr)
                subscriberOperations.changeConnectionCount(userId, equipmentId, connectionCount - 1);

            // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω–Ω–µ–∫—Ç, —Ç–æ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –Ω–æ–º–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
            if (!isActiveSubscr && connectionCount - 1 == 0) {
                SendMessage sendMessage = SendMessage.builder()
                        .chatId(userId)
                        .text("‚ùóÔ∏è–£ –í–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–µ <b>" + firebase.getHeavyMachineryNameById(document.getFields().getTypeID().getStringValue()) + "</b>\n\n" +
                                "–î–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–≤–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–∞–º –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É.\n" +
                                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏\n\n" +
                                "‚ùóÔ∏è–û–±—Ä–∞—â–∞—é –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ —É –≤–∞—Å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏.\n" +
                                "–î–ª—è –æ—Ç–º–µ–Ω—ã –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ü–ò–°–ö–ê–ú–ò</b> –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —É –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂\n" +
                                "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –Ω–∞–∂–∞–≤ —É –∑–∞–∫–∞–∑–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ</b>, –∞ –∑–∞—Ç–µ–º <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ü–ò–°–ö–ê–ú–ò</b>.")
                        .replyMarkup(getSubscriptionButtons(equipmentId, userId))
                        .parseMode(ParseMode.HTML)
                        .build();
                try {
                    new BuilderBot().execute(sendMessage);
                } catch (TelegramApiException e) {
                    logger.log(Level.SEVERE, null, e);
                }
            }
            // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, —Ç–æ —É–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–Ω–Ω–µ–∫—Ç–æ–≤ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π connectionCount –≤ Redis
            // –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —Ç—Ä–∏–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É —Å 2 –∫–æ–Ω–Ω–µ–∫—Ç–∞–º–∏ - –æ–Ω –º–æ–∂–µ—Ç –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –µ–µ —Å—Ä–∞–∑—É —Å 2 –∫–æ–Ω–Ω–µ–∫—Ç–∞–º–∏
            if (!isActiveSubscr)
                redisEntity.hashSet(userId, equipmentId.concat("_connectionCount"), String.valueOf(connectionCount - 1));
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
        }
    }

    private InlineKeyboardMarkup getSubscriptionButtons(String equipmentId, String userId) {

        boolean isAdmin = redisEntity.getElements("builder_admins") != null
                && !redisEntity.getElements("builder_admins").isEmpty()
                && redisEntity.getElements("builder_admins").contains(userId);

        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> listOfListInlineKey = new ArrayList<>();

        // –ü–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î –≤—Å–µ —Ç–∏–ø—ã –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏ –∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
        subscriptionOperations.getAllSubscriptions(equipmentId).forEach(subscription -> {
            if (subscription.getSubscriptionType() == SubscriptionType.test && !isAdmin)
                return;
            List<InlineKeyboardButton> inlineKeyboardButtons = new ArrayList<>();
            InlineKeyboardButton inlineKeyboardButton = new InlineKeyboardButton();
            inlineKeyboardButton.setText(subscription.getDescription().concat(" ").concat(subscription.getAmount().concat(" —Ä—É–±.")));
            inlineKeyboardButton.setCallbackData(subscription.getSubscriptionType().value().concat("_").concat(equipmentId));
            inlineKeyboardButtons.add(inlineKeyboardButton);
            listOfListInlineKey.add(inlineKeyboardButtons);
        });
        inlineKeyboardMarkup.setKeyboard(listOfListInlineKey);

        return inlineKeyboardMarkup;
    }

    @Override
    public boolean checkActiveSubscription(String chatId, String equipmentType) {
        return subscriberOperations.checkActiveSubscription(chatId, equipmentType);
    }

    @Override
    public boolean checkTrialSubscription(String chatId, String equipmentType) {
        return subscriberOperations.checkTrialSubscription(chatId, equipmentType);
    }

    @Override
    public boolean checkAutoPaySubscription(String chatId, String equipmentType) {
        return subscriberOperations.checkAutoPaySubscription(chatId, equipmentType);
    }

    @Override
    public void sendAlreadyHaveSubscription(String chatId, String equipmentType) {
        SendMessage sendMessage = SendMessage.builder()
                .chatId(chatId)
                .text("‚ùó–£ –í–∞—Å —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É <b>" + firebase.getHeavyMachineryNameById(equipmentType).toUpperCase() + "</b>.\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—Éüëáüèª.\n–û—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –í—ã —Å–º–æ–∂–µ—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π.")
                .replyMarkup(getMainMenuButton())
                .parseMode(ParseMode.HTML)
                .build();
        try {
            new BuilderBot().execute(sendMessage);
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
    }

    @Override
    public void sendHaveAutoPayment(String chatId, String equipmentType) {
        try {
            new BuilderBot().execute(SendMessage.builder()
                    .chatId(chatId)
                    .text("‚ùó–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É <b>" + firebase.getHeavyMachineryNameById(equipmentType).toUpperCase() + "</b> –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂.\n" +
                            "–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏–±–æ –¥–æ–∂–¥–∞—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞, –ª–∏–±–æ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –∏ –∑–∞–Ω–æ–≤–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
                    .replyMarkup(getMainMenuButton())
                    .parseMode(ParseMode.HTML)
                    .build());
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
    }

    @Override
    public void sendDontHaveTrialSubscription(String chatId, String equipmentType) {
        SendMessage sendMessage = SendMessage.builder()
                .chatId(chatId)
                .text("‚ùó–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É <b>" + firebase.getHeavyMachineryNameById(equipmentType).toUpperCase() + "</b>.\n–°–Ω–∞—á–∞–ª–∞ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–∞–Ω–Ω—É—é —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–∫—É '–í—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É'üëáüèª")
                .replyMarkup(getMainMenuButton())
                .parseMode(ParseMode.HTML)
                .build();
        try {
            new BuilderBot().execute(sendMessage);
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
    }

    @Override
    public void sendRequestEmail(String chatId) {
        logger.log(Level.INFO, "method - Request Email, userId - {0}", chatId);
        SendMessage sendMessage = SendMessage.builder()
                .chatId(chatId)
                .text("‚ùóÔ∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à email –∞–¥—Ä–µ—Å. –û–Ω —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏.\n\n" +
                        "<b>–ù–∏—á–µ–≥–æ –∫—Ä–æ–º–µ —á–µ–∫–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –º—ã –í–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ –±—É–¥–µ–º!</b>")
                .parseMode(ParseMode.HTML)
                .build();
        try {
            new BuilderBot().execute(sendMessage);
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
    }

    @Override
    public void saveEmail(String chatId, String email) {
        redisEntity.hashSet(chatId, "email", email);
        redisEntity.deleteElement(chatId.concat("_email"));
    }

    @Override
    public void addSubscriberInfo(String chatId, String heavyMachineryType) {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–¥–∞–µ–º –∫–æ–ª-–≤–æ –∫–æ–Ω–Ω–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏ –∏–∑ –ë–î
        int connectionCount = connectionOperations.getCountOfConnectionsByEquipmentType(heavyMachineryType);

        // –ï—Å–ª–∏ –≤ Redis –∏–º–µ–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ –∫–æ–Ω–Ω–µ–∫—Ç–æ–≤, —Ç–æ —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å –¥–∞–Ω–Ω—ã–º –∫–æ–ª-–≤–æ –∫–æ–Ω–Ω–µ–∫—Ç–æ–≤
        // –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã –Ω–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏–º–µ–ª–∞ –æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª-–≤–æ –∫–æ–Ω–Ω–µ–∫—Ç–æ–≤, –∞ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∞—Å—å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—Å—Ç—É–ø–Ω—ã–º –∫–æ–ª-–≤–æ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ–≤
        // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –∫–æ–ª-–≤–æ –∫–æ–Ω–Ω–µ–∫—Ç–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–æ –ú–ï–ù–¨–®–ï –∏–ª–∏ –†–ê–í–ù–û –∫–æ–ª-–≤—É –∫–æ–Ω–Ω–µ–∫—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –ë–î –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏.
        // –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∫–µ–π—Å–∞, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π, –ø–æ—Ç–æ–º –æ—Ç–º–µ–Ω–∏–ª –µ–µ, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –∑–∞ —Å–æ–±–æ–π –±–æ–ª—å—à–æ–µ –∫–æ–ª-–≤–æ –∫–æ–Ω–Ω–µ–∫—Ç–æ–≤,
        // –Ω–æ –ø–æ–¥–ø–∏—Å–∫–∞ —Å—Ç–∞–ª–∞ –ø–ª–∞—Ç–Ω–æ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª-–≤–æ –∫–æ–Ω–Ω–µ–∫—Ç–æ–≤ –∏ –æ–Ω –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ–µ.
        if (redisEntity.hashGet(chatId, heavyMachineryType.concat("_connectionCount")) != null
                && !redisEntity.hashGet(chatId, heavyMachineryType.concat("_connectionCount")).isEmpty()
                && Integer.parseInt(redisEntity.hashGet(chatId, heavyMachineryType.concat("_connectionCount"))) <= connectionCount) {
            connectionCount = Integer.parseInt(redisEntity.hashGet(chatId, heavyMachineryType.concat("_connectionCount")));
        }
        subscriberOperations.addSubscriber(new Subscriber(chatId, heavyMachineryType, connectionCount));
        redisEntity.hashSet(chatId, heavyMachineryType.concat("_connectionCount"), String.valueOf(connectionCount));
    }

    @Override
    public void getAllActiveAndTrialSubscriptionsForUser(String chatId) {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä
        // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö/—Ç—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ—Ç, —Ç–æ —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ —Ç–∞–∫–æ–≤—ã—Ö –Ω–µ—Ç

        List<Subscriber> resultSubscriberList = null;
        List<Subscriber> subscriberList = subscriberOperations.getAllActiveAndTrialSubscriptionsForUser(chatId);
        String text = "–£ –í–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫";

        StringBuilder resultSb = new StringBuilder();

        if (subscriberList != null && !subscriberList.isEmpty()) {

            resultSubscriberList = new ArrayList<>(subscriberList);
            resultSb.insert(0, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å\n\n");

            StringBuilder stringBuilder = new StringBuilder();
            subscriberList.forEach(subscriber -> {

                // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏
                stringBuilder
                        .append("\n")
                        .append("*=>")
                        .append(connectionOperations.getNameByEquipmentType(subscriber.getEquipmentType()))
                        .append(":*\n");

                if (subscriber.getStatus().equals("Active")) {
                    stringBuilder.append("–¢–∏–ø: –ü–ª–∞—Ç–Ω–∞—è").append("\n");
                    stringBuilder.append("–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞—è").append("\n");

                    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –ø–æ ID –ø–ª–∞—Ç–µ–∂–∞
                    Payment payment = paymentOperations.getPaymentByPaymentId(subscriber.getPaymentId());

                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    DateTimeFormatter sourceFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                    DateTimeFormatter newFormatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");
                    String nextBillDate = newFormatter.format(sourceFormatter.parse(payment.getNextBillDate()));
                    stringBuilder.append("–°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂: ").append(nextBillDate).append("\n");
                    stringBuilder.append("–°—Ç–æ–∏–º–æ—Å—Ç—å: ").append(payment.getAmount().getValue()).append(" —Ä—É–±.").append("\n");
                } else if (subscriber.getStatus().equals("AutoPay")) {
                    stringBuilder.append("–¢–∏–ø: –ü–ª–∞—Ç–Ω–∞—è").append("\n");
                    stringBuilder.append("–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂").append("\n");

                    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –ø–æ ID –ø–ª–∞—Ç–µ–∂–∞
                    Payment payment = paymentOperations.getPaymentByPaymentId(subscriber.getPaymentId());

                    // –ò–∑ —Ç–∞–±–ª–∏—Ü—ã ErrorPayments –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ—à–∏–±–∫–∏ (errorDate) –∏ –Ω–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏ (tryCount) –ø–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É ID –ø–ª–∞—Ç–µ–∂–∞ (paymentMethodId)
                    ErrorPayment errorPayment = paymentOperations.getErrorInfoByPaymentMethodId(payment.getPaymentMethod().getId());
                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                    LocalDateTime errorDateTime = LocalDateTime.parse(errorPayment.getErrorDate(), formatter);

                    // –ï—Å–ª–∏ tryCount = 0 –∏–ª–∏ 1 - –∑–Ω–∞—á–∏—Ç –∫ errorDate –ø—Ä–∏–±–∞–≤–ª—è–µ–º 2 –¥–Ω—è
                    if (errorPayment.getTryCount() == 0 || errorPayment.getTryCount() == 1) {
                        LocalDateTime plusTwoDaysDateTime = errorDateTime.plusDays(2);
                        formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");
                        String nextBillDate = formatter.format(plusTwoDaysDateTime);
                        stringBuilder.append("–°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂: ").append(nextBillDate).append("\n");
                    }
                    // –ï—Å–ª–∏ tryCount = 2 - –∑–Ω–∞—á–∏—Ç –∫ errorDate –ø—Ä–∏–±–∞–≤–ª—è–µ–º 5 –¥–Ω–µ–π
                    if (errorPayment.getTryCount() == 2) {
                        LocalDateTime plusFiveDaysDateTime = errorDateTime.plusDays(5);
                        formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");
                        String nextBillDate = formatter.format(plusFiveDaysDateTime);
                        stringBuilder.append("–°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂: ").append(nextBillDate).append("\n");
                    }

                    stringBuilder.append("–°—Ç–æ–∏–º–æ—Å—Ç—å: ").append(payment.getAmount().getValue()).append(" —Ä—É–±.").append("\n");

                } else if (subscriber.getStatus().equals("Trial")) {
                    if (subscriber.getConnectCount() > 30) {
                        stringBuilder.append("–¢–∏–ø: –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è").append("\n");
                    } else {
                        stringBuilder.append("–¢–∏–ø: –ü—Ä–æ–±–Ω–∞—è").append("\n");
                        stringBuilder.append("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ").append(subscriber.getConnectCount()).append("\n");
                    }
                }
            });
            resultSb.append(stringBuilder);
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ 'Active', –ù–û —Å —Ñ–ª–∞–∂–∫–æ–º isAutoPay = false
        // –¢–æ –µ—Å—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–∏–ª–∏, –Ω–æ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—â–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç
        subscriberList = subscriberOperations.getAllActiveWithoutAutoPaySubscriptionsForUser(chatId);

        if (subscriberList != null && !subscriberList.isEmpty()) {

            if (resultSubscriberList == null)
                resultSubscriberList = new ArrayList<>();

            resultSubscriberList.addAll(subscriberList);

            if (resultSb.toString().isEmpty()) {
                resultSb.insert(0, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å\n\n");
            }

            StringBuilder stringBuilder = new StringBuilder();
            subscriberList.forEach(subscriber -> {

                // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏
                stringBuilder
                        .append("\n")
                        .append("*=>")
                        .append(connectionOperations.getNameByEquipmentType(subscriber.getEquipmentType()))
                        .append(":*\n");
                stringBuilder.append("–¢–∏–ø: –ü–ª–∞—Ç–Ω–∞—è").append("\n");
                stringBuilder.append("–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞—è").append("\n");

                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –ø–æ ID –ø–ª–∞—Ç–µ–∂–∞
                Payment payment = paymentOperations.getPaymentByPaymentId(subscriber.getPaymentId());
                if (payment == null) {
                    logger.log(Level.SEVERE, "payment is null for paymentId - {0}", subscriber.getPaymentId());
                    return;
                }

                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                DateTimeFormatter sourceFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                DateTimeFormatter newFormatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");
                String nextBillDate = newFormatter.format(sourceFormatter.parse(payment.getNextBillDate()));
                stringBuilder.append("–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ").append(nextBillDate).append("\n");
            });
            resultSb.append(stringBuilder);
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        ReplyKeyboard replyKeyboard = (resultSubscriberList != null && !resultSubscriberList.isEmpty()) ? getAllActiveAndTrialSubscriptionButtons(resultSubscriberList) : null;

        SendMessage sendMessage = SendMessage.builder()
                .chatId(chatId)
                .text(resultSb.toString().isEmpty() ?
                        text
                        :
                        resultSb.toString()
                                .replaceAll("\\=", "\\\\=")
                                .replaceAll("\\>", "\\\\>")
                                .replaceAll("\\.", "\\\\.")
                                .replaceAll("\\(", "\\\\(")
                                .replaceAll("\\)", "\\\\)")
                                .replaceAll("\\-", "\\\\-")
                )
                .parseMode(ParseMode.MARKDOWNV2)
                .replyMarkup(replyKeyboard)
                .build();
        try {
            new BuilderBot().execute(sendMessage);
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
    }

    @Override
    public void getHelpInfo(String chatId) {
        try {
            String text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –°—Ç—Ä–æ–∏—Ç–µ–ª—å! üöú\n\n" +
                    "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã –Ω–∞ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –ú–æ—Å–∫–≤–µ –∏ –ú–û.\n" +
                    "–î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –≤ –±–æ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º [–°—Ç—Ä–æ–∏—Ç–µ–ª—å](https://play.google.com/store/apps/details?id=com.builders)\n\n" +
                    "*–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:*\n" +
                    "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã - –∫–Ω–æ–ø–∫–∞ *–í—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É*\n" +
                    "‚ñ∂Ô∏è –ù–∞ –∫–∞–∂–¥—ã–π —Ç–∏–ø —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ\n" +
                    "‚ñ∂Ô∏è –°—Ä–µ–¥–∏ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫ –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ. –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞ –º–æ–∂–Ω–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑\n" +
                    "‚ñ∂Ô∏è –ï—Å–ª–∏ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∞ –ø–ª–∞—Ç–Ω–∞—è, —Ç–æ —Å–Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. –í —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤–∞–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞ - –∫–Ω–æ–ø–∫–∞ *–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω*\n" +
                    "2Ô∏è‚É£ –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏ –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∑–∞–∫–∞–∑—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É –ø–æ –º–µ—Ä–µ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É *–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω*\n" +
                    "3Ô∏è‚É£ –ö–æ–≥–¥–∞ –∏—Å—Ç–µ–∫ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É, –±–æ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É *–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω* –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏ —É–∫–∞–∂–µ—Ç —Ç–∞—Ä–∏—Ñ—ã. –í—ã–±—Ä–∞–≤ –Ω—É–∂–Ω—ã–π —Ç–∞—Ä–∏—Ñ –±–æ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç email –∞–¥—Ä–µ—Å.\n" +
                    "–û–±—Ä–∞—â–∞—é –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ email –∞–¥—Ä–µ—Å —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º –∏ –µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ù–∞ –¥–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏–¥–µ—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —á–µ–∫. \n" +
                    "–ï—Å–ª–∏ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ email –∞–¥—Ä–µ—Å–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ—à–∏–±–∫—É, –∑–Ω–∞—á–∏—Ç email –∞–¥—Ä–µ—Å —É–∫–∞–∑–∞–Ω –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ï—Å–ª–∏ email –∞–¥—Ä–µ—Å –±—ã–ª —É–∫–∞–∑–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Ç–æ –±–æ—Ç —Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏.\n" +
                    "–ü–æ –∫–Ω–æ–ø–∫–µ *–û–ø–ª–∞—Ç–∏—Ç—å* –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.\n" +
                    "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –ø—Ä–∏—à–ª–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ, —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã —Å—Ä–∞–∑—É —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n" +
                    "‚ñ∂Ô∏è –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. –¢–æ –µ—Å—Ç—å –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂. –ó–∞ 24 —á–∞—Å–∞ –¥–æ –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏—è –±–æ—Ç –ø—Ä–∏—à–ª–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ. –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏*\n" +
                    "‚ñ∂Ô∏è –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏. –ü—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤: —á–µ—Ä–µ–∑ 2 –∏ —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π –æ—Ç –¥–∞—Ç—ã –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞.\n" +
                    "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã –∏ –¥–æ–∂–¥–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤, –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏ –æ—Ñ–æ—Ä–º–ª—è—Ç—å –µ–µ –∑–∞–Ω–æ–≤–æ.\n" +
                    "–í —Ç–µ—á–µ–Ω–∏–µ 5 –¥–Ω–µ–π –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ —É –≤–∞—Å –±—É–¥–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫–∞–∑–∞–º.\n" +
                    "4Ô∏è‚É£ –î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É *–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º*\n" +
                    "5Ô∏è‚É£ –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É *–£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏* –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n\n" +
                    "*–ö–Ω–æ–ø–∫–∏:*\n" +
                    "‚è∫Ô∏è*–í—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É* - –í—ã–±–æ—Ä —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã\n" +
                    "‚è∫Ô∏è*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏* - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–µ–∫—É—â–∏–º –ø–æ–¥–ø–∏—Å–∫–∞–º: –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ–ª-–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, –¥–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∏ —Ç–¥\n" +
                    "‚è∫Ô∏è*–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º* - –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã \n" +
                    "‚è∫Ô∏è*–ü–æ–º–æ—â—å* - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏";

            new BuilderBot().execute(SendMessage.builder()
                    .chatId(chatId)
                    .text(text
                            .replaceAll("\\!", "\\\\!")
                            .replaceAll("\\.", "\\\\.")
                            .replaceAll("\\-", "\\\\-")
                            .replaceAll("\\=", "\\\\=")
                    )
                    .parseMode(ParseMode.MARKDOWNV2)
                    .disableWebPagePreview(true)
                    .replyMarkup(getPriceButton())
                    .build());
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
    }

    @Override
    public void getPriceInfo(String chatId) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î Firebase –≤—Å–µ –≤–∏–¥—ã —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏
        List<Document> heavyTypes = firebase.getAllHeavyMachineryName();
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏
        heavyTypes.sort(Comparator.comparing(object -> object.getFields().getName().getStringValue()));

        StringBuilder stringBuilder = new StringBuilder();

        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å–ø–∏—Å–∫—É —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫
        heavyTypes.forEach(heavy -> {
            // –ü–æ –∫–∞–∂–¥–æ–π —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–µ –ø–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã
            List<Subscription> subscriptions = subscriptionOperations.getAllSubscriptions(String.valueOf(heavy.getFields().getId().getStringValue()));

            // –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏ —Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ –æ—Ç–º–µ—Ç–∫—É "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ", –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤
            if (subscriptions.get(0).getAmount().equals("0.00")) {
                stringBuilder.append("<b>=>").append(heavy.getFields().getName().getStringValue()).append(":</b> –ë–µ—Å–ø–ª–∞—Ç–Ω–æ\n\n");
                return;
            }

            stringBuilder.append("<b>=>").append(heavy.getFields().getName().getStringValue()).append(":</b>\n");
            subscriptions.forEach(subscription -> {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ
                if (subscription.getSubscriptionType() == SubscriptionType.test)
                    return;
                // –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞—Ä–∏—Ñ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
                stringBuilder.append(subscription.getDescription()).append(" - ").append(subscription.getAmount()).append(" —Ä—É–±.\n");
            });
            stringBuilder.append("\n");
        });

        try {
            new BuilderBot().execute(SendMessage.builder()
                    .chatId(chatId)
                    .text(stringBuilder.toString())
                    .parseMode(ParseMode.HTML)
                    .replyMarkup(getMainMenuButton())
                    .build());
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
    }

    @Override
    public void unsubscribe(String chatId, String equipmentType, Integer messageId) {
        List<Subscriber> subscriberList = subscriberOperations.getAllActiveAndTrialSubscriptionsForUser(chatId);
        Subscriber subscriber = subscriberList.stream().filter(subscr -> subscr.getEquipmentType().equals(equipmentType)).findAny().orElse(null);

        // –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–∞ –æ–ø–ª–∞—á–µ–Ω–æ–π (—Å—Ç–∞—Ç—É—Å Active)
        //  - –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å Trial, —Ç–æ –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –≤ –ë–î —Å—Ç–∞—Ç—É—Å Expired, expiredDate –∫–∞–∫ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É + —É–¥–∞–ª—è–µ–º –∏–∑ Redis –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏
        //  - –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å Active, –∑–Ω–∞—á–∏—Ç –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ–ø–ª–∞—á–µ–Ω–∞. –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –≤ –ë–î —Ñ–ª–∞–∂–æ–∫ isAutoPay = false, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–π –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª

        if (subscriber == null) {
            logger.log(Level.SEVERE, "Subscriber object for id - {0} and equipmentType - {1} from unsubscribe method is null!", new Object[]{chatId, equipmentType});
            return;
        }

        logger.log(Level.SEVERE, "Method: unsubscribe >> Subscriber info for id - {0} and equipmentType - {1}: {2}", new Object[]{chatId, equipmentType, new Gson().toJson(subscriber)});

        boolean isTrialSubscr = subscriber.getStatus().equals("Trial");

        if (isTrialSubscr) {
            logger.log(Level.SEVERE, "CANCEL TRIAL SUBSCRIPTION: userId - {0}, equipmentType - {1}", new Object[]{chatId, equipmentType});
            subscriberOperations.cancelTrialSubscription(chatId, equipmentType, false);
            // –í Redis —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞ —Å–ø–µ—Ü–∏–µ—Ö–Ω–∏–∫–∏, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –ø–æ–ª—É—á–∞–ª –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã, –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–ø–∏—à–µ—Ç—Å—è —Å–Ω–æ–≤–∞
            redisEntity.remElement(subscriber.getEquipmentType(), chatId);
        } else {
            logger.log(Level.SEVERE, "CANCEL PAID SUBSCRIPTION: userId - {0}, equipmentType - {1}", new Object[]{chatId, equipmentType});
            subscriberOperations.cancelPaidSubscription(chatId, equipmentType);
        }

        String text = isTrialSubscr ? "‚ùó–ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–µ <b>" + firebase.getHeavyMachineryNameById(equipmentType) + "</b> —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!\n–í—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É."
                : "‚ùó–ü–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–µ <b>" + firebase.getHeavyMachineryNameById(equipmentType) + "</b> —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!\n–í—ã –±—É–¥–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ –¥–∞–Ω–Ω–æ–π —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–µ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n–ù–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π.";

        // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞
        if (subscriber.getStatus().equals("AutoPay")) {
            logger.log(Level.SEVERE, "CANCEL SUBSCRIPTION: status - AutoPay, userId - {0}, equipmentType - {1}", new Object[]{chatId, equipmentType});
            text = "‚ùó–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–µ <b>" + firebase.getHeavyMachineryNameById(equipmentType) + "</b> —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!\n" +
                    "–í—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.\n" +
                    "–î–ª—è —ç—Ç–æ–≥–æ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–Ω–æ–≤–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–∞–Ω–Ω—É—é —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É";
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
            subscriberOperations.updateSubscriptionInfo(subscriber.getUserId(), subscriber.getPaymentId(), dateFormat.format(Calendar.getInstance().getTime()), true);
            // –í Redis —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞ —Å–ø–µ—Ü–∏–µ—Ö–Ω–∏–∫–∏, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –ø–æ–ª—É—á–∞–ª –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã, –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–ø–∏—à–µ—Ç—Å—è —Å–Ω–æ–≤–∞
            redisEntity.remElement(subscriber.getEquipmentType(), subscriber.getUserId());
        }

        try {
            new BuilderBot().execute(SendMessage.builder()
                    .chatId(chatId)
                    .text(text)
                    .parseMode(ParseMode.HTML)
                    .build());
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–≤–Ω—ã–µ/–ø–ª–∞—Ç–Ω—ã–µ –∏ —Ç—Ä–∏–∞–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏  (+ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ 'AutoPay')
        List<Subscriber> resultSubscriberList = null;
        subscriberList = subscriberOperations.getAllActiveAndTrialSubscriptionsForUser(chatId);

        StringBuilder resultSb = new StringBuilder();

        if (subscriberList != null && !subscriberList.isEmpty()) {

            resultSubscriberList = new ArrayList<>(subscriberList);
            resultSb.insert(0, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å\n\n");

            StringBuilder stringBuilder = new StringBuilder();
            subscriberList.forEach(subscr -> {

                // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏
                stringBuilder
                        .append("\n")
                        .append("*=>")
                        .append(connectionOperations.getNameByEquipmentType(subscr.getEquipmentType()))
                        .append(":*\n");

                if (subscr.getStatus().equals("Active")) {
                    stringBuilder.append("–¢–∏–ø: –ü–ª–∞—Ç–Ω–∞—è").append("\n");
                    stringBuilder.append("–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞—è").append("\n");

                    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –ø–æ ID –ø–ª–∞—Ç–µ–∂–∞
                    Payment payment = paymentOperations.getPaymentByPaymentId(subscr.getPaymentId());

                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    DateTimeFormatter sourceFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                    DateTimeFormatter newFormatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");
                    String nextBillDate = newFormatter.format(sourceFormatter.parse(payment.getNextBillDate()));
                    stringBuilder.append("–°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂: ").append(nextBillDate).append("\n");
                    stringBuilder.append("–°—Ç–æ–∏–º–æ—Å—Ç—å: ").append(payment.getAmount().getValue()).append(" —Ä—É–±.").append("\n");
                } else if (subscr.getStatus().equals("AutoPay")) {
                    stringBuilder.append("–¢–∏–ø: –ü–ª–∞—Ç–Ω–∞—è").append("\n");
                    stringBuilder.append("–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂").append("\n");

                    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –ø–æ ID –ø–ª–∞—Ç–µ–∂–∞
                    Payment payment = paymentOperations.getPaymentByPaymentId(subscr.getPaymentId());

                    // –ò–∑ —Ç–∞–±–ª–∏—Ü—ã ErrorPayments –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ—à–∏–±–∫–∏ (errorDate) –∏ –Ω–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏ (tryCount) –ø–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É ID –ø–ª–∞—Ç–µ–∂–∞ (paymentMethodId)
                    ErrorPayment errorPayment = paymentOperations.getErrorInfoByPaymentMethodId(payment.getPaymentMethod().getId());
                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                    LocalDateTime errorDateTime = LocalDateTime.parse(errorPayment.getErrorDate(), formatter);

                    // –ï—Å–ª–∏ tryCount = 0 –∏–ª–∏ 1 - –∑–Ω–∞—á–∏—Ç –∫ errorDate –ø—Ä–∏–±–∞–≤–ª—è–µ–º 2 –¥–Ω—è
                    if (errorPayment.getTryCount() == 0 || errorPayment.getTryCount() == 1) {
                        LocalDateTime plusTwoDaysDateTime = errorDateTime.plusDays(2);
                        formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");
                        String nextBillDate = formatter.format(plusTwoDaysDateTime);
                        stringBuilder.append("–°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂: ").append(nextBillDate).append("\n");
                    }
                    // –ï—Å–ª–∏ tryCount = 2 - –∑–Ω–∞—á–∏—Ç –∫ errorDate –ø—Ä–∏–±–∞–≤–ª—è–µ–º 5 –¥–Ω–µ–π
                    if (errorPayment.getTryCount() == 2) {
                        LocalDateTime plusFiveDaysDateTime = errorDateTime.plusDays(5);
                        formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");
                        String nextBillDate = formatter.format(plusFiveDaysDateTime);
                        stringBuilder.append("–°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂: ").append(nextBillDate).append("\n");
                    }

                    stringBuilder.append("–°—Ç–æ–∏–º–æ—Å—Ç—å: ").append(payment.getAmount().getValue()).append(" —Ä—É–±.").append("\n");

                } else if (subscr.getStatus().equals("Trial")) {
                    if (subscr.getConnectCount() > 30) {
                        stringBuilder.append("–¢–∏–ø: –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è").append("\n");
                    } else {
                        stringBuilder.append("–¢–∏–ø: –ü—Ä–æ–±–Ω–∞—è").append("\n");
                        stringBuilder.append("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ").append(subscr.getConnectCount()).append("\n");
                    }
                }
            });
            resultSb.append(stringBuilder);
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ 'Active', –ù–û —Å —Ñ–ª–∞–∂–∫–æ–º isAutoPay = false
        // –¢–æ –µ—Å—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–∏–ª–∏, –Ω–æ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—â–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç
        subscriberList = subscriberOperations.getAllActiveWithoutAutoPaySubscriptionsForUser(chatId);

        if (subscriberList != null && !subscriberList.isEmpty()) {

            if (resultSubscriberList == null)
                resultSubscriberList = new ArrayList<>();

            resultSubscriberList.addAll(subscriberList);

            if (resultSb.toString().isEmpty()) {
                resultSb.insert(0, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å\n\n");
            }

            StringBuilder stringBuilder = new StringBuilder();
            subscriberList.forEach(subs -> {

                // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏
                stringBuilder
                        .append("\n")
                        .append("*=>")
                        .append(connectionOperations.getNameByEquipmentType(subs.getEquipmentType()))
                        .append(":*\n");
                stringBuilder.append("–¢–∏–ø: –ü–ª–∞—Ç–Ω–∞—è").append("\n");
                stringBuilder.append("–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞—è").append("\n");

                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –ø–æ ID –ø–ª–∞—Ç–µ–∂–∞
                Payment payment = paymentOperations.getPaymentByPaymentId(subs.getPaymentId());
                if (payment == null) {
                    logger.log(Level.SEVERE, "payment is null for paymentId - {0}", subs.getPaymentId());
                    return;
                }
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                DateTimeFormatter sourceFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                DateTimeFormatter newFormatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");
                String nextBillDate = newFormatter.format(sourceFormatter.parse(payment.getNextBillDate()));
                stringBuilder.append("–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ").append(nextBillDate).append("\n");
            });
            resultSb.append(stringBuilder);
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        ReplyKeyboard replyKeyboard = (resultSubscriberList != null && !resultSubscriberList.isEmpty()) ? getAllActiveAndTrialSubscriptionButtons(resultSubscriberList) : null;

        // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–æ–∫ —É–∂–µ –Ω–µ—Ç, —Ç–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–¥–ø–∏—Å–∫–∏
        // –ü—Ä–∏ —ç—Ç–æ–º –ù–ï —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∞—Å—å –ê–ö–¢–ò–í–ù–ê–Ø –ø–æ–¥–ø–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—É—é –æ—Ç–º–µ–Ω–∏–ª–∏ –î–û –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞
        // –¢–æ –µ—Å—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ 'Active' –∏ —Å —Ñ–ª–∞–∂–∫–æ–º isAutoPay = false
        if (
                (resultSubscriberList == null || resultSubscriberList.isEmpty())
                        && ((subscriberList != null && !subscriberList.isEmpty() && subscriberList.stream().noneMatch(subscr -> subscr.getStatus().equals("Active") && !subscr.isAutoPay()))
                        || resultSb.toString().isEmpty())
        ) {
            try {
                new BuilderBot().execute(DeleteMessage.builder()
                        .chatId(chatId)
                        .messageId(messageId)
                        .build());
            } catch (TelegramApiException e) {
                logger.log(Level.SEVERE, null, e);
            }
        } else {
            // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –µ—â–µ –µ—Å—Ç—å, —Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–¥–ø–∏—Å–æ–∫: –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
            try {
                new BuilderBot().execute(EditMessageText.builder()
                        .chatId(chatId)
                        .text(resultSb.toString()
                                .replaceAll("\\=", "\\\\=")
                                .replaceAll("\\>", "\\\\>")
                                .replaceAll("\\.", "\\\\.")
                                .replaceAll("\\(", "\\\\(")
                                .replaceAll("\\)", "\\\\)")
                                .replaceAll("\\-", "\\\\-"))
                        .parseMode(ParseMode.MARKDOWNV2)
                        .messageId(messageId)
                        .replyMarkup((InlineKeyboardMarkup) replyKeyboard)
                        .build());
            } catch (TelegramApiException e) {
                logger.log(Level.SEVERE, null, e);
            }
        }

        // –ï—Å–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∏–¥–±–µ–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!isTrialSubscr) {
            this.sendRequestFeedbackAboutUnsubscribe(chatId);
        }
    }

    @Override
    public void requestProblem(String chatId) {
        SendMessage sendMessage = SendMessage.builder()
                .chatId(chatId)
                .text("–ö–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å?")
                .replyMarkup(getCloseDialogButton())
                .build();
        try {
            new BuilderBot().execute(sendMessage);
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
        redisEntity.setElement(chatId.concat("_help"), "true");
    }

    @Override
    public boolean checkSubscriberIsAlreadyExist(String userId) {
        return subscriberOperations.checkSubscriberIsAlreadyExist(userId);
    }

    @Override
    public void sayUnexpectedError(String userId, String message) {
        String text = message.concat(" –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'üëá");
        try {
            new BuilderBot().execute(SendMessage.builder()
                    .chatId(userId)
                    .text(text)
                    .replyMarkup(getMainMenuButton())
                    .build());
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
    }

    @Override
    public void sayAutoPaymentError(String userId, String message) {
        SendMessage sendMessage = SendMessage.builder()
                .chatId(userId)
                .text(message)
                .parseMode(ParseMode.HTML)
                .build();
        try {
            new BuilderBot().execute(sendMessage);
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
    }

    @Override
    public void sendMessageAboutSuccessfulPayment(String userId, String equipmentType) {
        SendMessage sendMessage = SendMessage.builder()
                .chatId(userId)
                .text("‚ùóÔ∏è–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n" +
                        "–¢–µ–ø–µ—Ä—å –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–µ <b>" + firebase.getHeavyMachineryNameById(equipmentType) + "</b>, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω —Å—Ä–∞–∑—É.\n\n" +
                        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ, –∑–∞—Ç–µ–º –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ü–ò–°–ö–ê–ú–ò.")
                .parseMode(ParseMode.HTML)
                .replyMarkup(getMainMenuButton())
                .build();
        try {
            new BuilderBot().execute(sendMessage);
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
    }

    @Override
    public void sendMessageAboutCanceledPayment(String userId, String reasonValue) {
        logger.log(Level.INFO, "method - Send message about payment is canceled, userId - {0}", userId);
        // –î–æ—Å—Ç–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ –ë–î –ø–æ –∫–æ–¥—É –ø—Ä–∏—á–∏–Ω—ã
        String description = dictionaryOperations.getErrorDescriptionByReason(reasonValue);
        String message = "‚ùóÔ∏è–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª!\n\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> " + description + "\n\n<b>–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Å—á–µ—Ç –∏ –æ–ø–ª–∞—Ç–∏—Ç—å –µ–≥–æ.</b>";
        SendMessage sendMessage = SendMessage.builder()
                .chatId(userId)
                .text(message)
                .parseMode(ParseMode.HTML)
                .replyMarkup(getMainMenuButton())
                .build();
        try {
            new BuilderBot().execute(sendMessage);
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
    }

    @Override
    public void sendWarningMessageAboutSubscriptionWillBeExpired(String chatId, String paymentId, Calendar warningTime) {
        long delay = warningTime.getTime().getTime() - Calendar.getInstance().getTimeInMillis();

        Subscriber subscriber = subscriberOperations.getSubscriberByPaymentId(paymentId);
        String message = "‚ùóÔ∏è–ü—Ä–∏–≤–µ—Ç! –ù–∞ —Å–≤—è–∑–∏ –±–æ—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—å üöú\n" +
                "–û–±—Ä–∞—â–∞—é –í–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ *–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É " + firebase.getHeavyMachineryNameById(subscriber.getEquipmentType()).toUpperCase() + " –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞*. –î–∞–ª–µ–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç *–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤*.\n" +
                "–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ *–æ—Ç–º–µ–Ω–∏—Ç—å* –ø–æ–¥–ø–∏—Å–∫—É - *–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ, –∑–∞—Ç–µ–º –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ü–ò–°–ö–ê–ú–ò*.\n\n" +
                "*–ï—Å–ª–∏ –í—ã —É–∂–µ –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É, —Ç–æ –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è! –Ø –æ–ø–æ–≤–µ—â—É –í–∞—Å –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.*";

        // –ï—Å–ª–∏ delay –æ—Ç—Ä–∏—Ü–∞–ª—å–Ω—ã–π, —Ç–æ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤
        if (delay < 0) {
            message = "‚ùóÔ∏è–ü—Ä–∏–≤–µ—Ç! –ù–∞ —Å–≤—è–∑–∏ –±–æ—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—å üöú\n" +
                    "–û–±—Ä–∞—â–∞—é –í–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –¥–æ *–æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É " + firebase.getHeavyMachineryNameById(subscriber.getEquipmentType()).toUpperCase() + " –ú–ï–ù–ï–ï 24 —á–∞—Å–æ–≤!* –î–∞–ª–µ–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç *–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤*.\n" +
                    "–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ *–æ—Ç–º–µ–Ω–∏—Ç—å* –ø–æ–¥–ø–∏—Å–∫—É - *–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ, –∑–∞—Ç–µ–º –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ü–ò–°–ö–ê–ú–ò*.\n\n" +
                    "*–ï—Å–ª–∏ –í—ã —É–∂–µ –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É, —Ç–æ –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è! –Ø –æ–ø–æ–≤–µ—â—É –í–∞—Å –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.*";
        }

        logger.log(Level.INFO, "Create task to warning user - {0} about subscription with delay - {1}", new Object[]{chatId, delay});
        String finalMessage = message;
        executorService.schedule(() -> {
            logger.log(Level.INFO, "Send warning message about subscription will be expired for userId - {0}", chatId);
            SendMessage sendMessage = SendMessage.builder()
                    .chatId(chatId)
                    .text(finalMessage
                            .replaceAll("\\.", "\\\\.")
                            .replaceAll("\\,", "\\\\,")
                            .replaceAll("\\!", "\\\\!")
                            .replaceAll("\\-", "\\\\-")
                            .replaceAll("\\)", "\\\\)")
                            .replaceAll("\\(", "\\\\("))
                    .parseMode(ParseMode.MARKDOWNV2)
                    .replyMarkup(getMainMenuButton())
                    .build();
            try {
                new BuilderBot().execute(sendMessage);
            } catch (TelegramApiException e) {
                logger.log(Level.SEVERE, null, e);
            }
        }, delay, TimeUnit.MILLISECONDS);
    }

    @Override
    public void sendMessageAboutCanceledAutoPayment(String chatId, String reasonValue) {
        logger.log(Level.INFO, "method - Send message about AUTO payment is canceled, userId - {0}", chatId);
        // –î–æ—Å—Ç–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ –ë–î –ø–æ –∫–æ–¥—É –ø—Ä–∏—á–∏–Ω—ã
        String description = dictionaryOperations.getErrorDescriptionByReason(reasonValue);
        String message = "‚ùóÔ∏è–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –ø–æ –í–∞—à–µ–π –∫–∞—Ä—Ç–µ –Ω–µ –ø—Ä–æ—à–µ–ª!\n\n" +
                "<b>–ü—Ä–∏—á–∏–Ω–∞:</b> " + description + "\n\n" +
                "<b>–Ø –ø—Ä–µ–¥–ø—Ä–∏–º—É –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤: —á–µ—Ä–µ–∑ 2 –¥–Ω—è –∏ —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π.</b>\n\n" +
                "‚ÑπÔ∏è–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤.\n" +
                "–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ü–ò–°–ö–ê–ú–ò</b> –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É";
        try {
            new BuilderBot().execute(SendMessage.builder()
                    .chatId(chatId)
                    .text(message)
                    .parseMode(ParseMode.HTML)
                    .replyMarkup(getMainMenuButton())
                    .build());
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
    }

    @Override
    public void sendMessageAboutSuccessfullyAutoPayment(String chatId, String equipmentType) {
        logger.log(Level.INFO, "method - send message about successfully auto payment for userId - {0}", chatId);
        SendMessage sendMessage = SendMessage.builder()
                .chatId(chatId)
                .text("‚ùó–ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ. –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É <b>" + firebase.getHeavyMachineryNameById(equipmentType) + "</b> –ø—Ä–æ–¥–ª–µ–Ω–∞.")
                .replyMarkup(getMainMenuButton())
                .parseMode(ParseMode.HTML)
                .build();
        try {
            new BuilderBot().execute(sendMessage);
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
    }

    @Override
    public void sayHelloAfterUnsubscribe(String chatId, String equipmentType) {
        String helloMessage = "‚ùóÔ∏è–ü—Ä–∏–≤–µ—Ç! –ù–∞ —Å–≤—è–∑–∏ –±–æ—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—å üöú\n" +
                "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–ø–µ—Ü—Ç—Ö–µ–Ω–∏–∫—É <b>" + firebase.getHeavyMachineryNameById(equipmentType) + "</b> –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å! \n\n" +
                "<b>–ß—Ç–æ–±—ã –∑–∞–Ω–æ–≤–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –í—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É</b>üëáüèª";
        SendMessage sendMessage = SendMessage.builder()
                .chatId(chatId)
                .text(helloMessage)
                .replyMarkup(getMainMenuButton())
                .parseMode(ParseMode.HTML)
                .build();
        try {
            new BuilderBot().execute(sendMessage);
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
    }

    @Override
    public void sendMessageAboutAutoPaymentError(String chatId, String equipmentType) {
        logger.log(Level.INFO, "method - Send message about AUTO payment error, userId - {0}", chatId);

        ReplyKeyboardRemove replyKeyboardRemove = new ReplyKeyboardRemove();
        replyKeyboardRemove.setRemoveKeyboard(true);
        SendMessage sendMessage = SendMessage.builder()
                .chatId(chatId)
                .text("‚ùóÔ∏èÔ∏è–ü—Ä–∏–≤–µ—Ç! –ù–∞ —Å–≤—è–∑–∏ –±–æ—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—å üöú\n" +
                        "–ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É <b>" + firebase.getHeavyMachineryNameById(equipmentType) + "</b>!üòî\n" +
                        "–Ø –ø—Ä–µ–¥–ø—Ä–∏–º—É –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –∏ —Å–æ–æ–±—â—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç 15 –¥–æ 20 –º–∏–Ω—É—Ç.\n\n" +
                        "<b>–í–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤, –ø—Ä–æ—Å—å–±–∞ –Ω–µ –æ—Ñ–æ—Ä–º–ª—è—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É!</b>")
                .replyMarkup(replyKeyboardRemove)
                .parseMode(ParseMode.HTML)
                .build();
        try {
            new BuilderBot().execute(sendMessage);
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
    }

    @Override
    public void feedbackRequest(String chatId) {
        SendMessage sendMessage = SendMessage.builder()
                .chatId(chatId)
                .text("üöú –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                .replyMarkup(getCancelFeedbackButton())
                .build();
        try {
            new BuilderBot().execute(sendMessage);
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
        this.redisEntity.setElement(chatId.concat("_feedback"), "true");
    }

    @Override
    public void cancelFeedback(String chatId) {
        SendMessage sendMessage = SendMessage.builder()
                .chatId(chatId)
                .text("–í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω üôÖüèª‚Äç‚ôÇÔ∏è")
                .replyMarkup(getMainMenuButton())
                .build();
        try {
            new BuilderBot().execute(sendMessage);
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
        this.redisEntity.deleteElement(chatId.concat("_feedback"));
    }

    @Override
    public void sendThanksToUserForHisFeedback(String chatId) {
        SendMessage sendMessage = SendMessage.builder()
                .chatId(chatId)
                .text("üöú –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")
                .replyMarkup(getMainMenuButton())
                .build();
        try {
            new BuilderBot().execute(sendMessage);
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
        this.redisEntity.deleteElement(chatId.concat("_feedback"));
    }

    @Override
    public void deleteInactiveUsersByAdmin(String userId) {
        logger.log(Level.SEVERE, "Start delete inactive subscriptions by admin - {0} ", userId);
        // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ 'Trial', –±–µ–∑ email –∏ —É –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞.
        // –¢–∞–∫–∂–µ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        // –≠—Ç–æ –±—É–¥—É—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã –î–û 17 –∏—é–Ω—è
        List<Subscriber> inactiveSubscriptions = this.subscriberOperations.getOldInactiveUsers();

        if (inactiveSubscriptions == null || inactiveSubscriptions.isEmpty()) {
            logger.log(Level.SEVERE, "inactiveSubscriptions is null or is empty, return ...");
            try {
                new BuilderBot().execute(
                        SendMessage.builder()
                                .chatId(userId)
                                .text("‚ùóÔ∏è–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
                                .build());
            } catch (TelegramApiException e) {
                logger.log(Level.SEVERE, null, e);
            }
            return;
        }

        logger.log(Level.SEVERE, "inactiveSubscriptions size = {0}", inactiveSubscriptions.size());

        // –ü—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–µ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
        // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ Redis –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏
        inactiveSubscriptions.forEach(inactiveSubscriber -> {
            logger.log(Level.SEVERE, "Delete old inactive subscription - {0} ", new Gson().toJson(inactiveSubscriber));
            subscriberOperations.cancelInactiveOLDTrialSubscription(inactiveSubscriber.getUserId(), inactiveSubscriber.getEquipmentType());
            // –í Redis —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞ —Å–ø–µ—Ü–∏–µ—Ö–Ω–∏–∫–∏, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –ø–æ–ª—É—á–∞–ª –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
            redisEntity.remElement(inactiveSubscriber.getEquipmentType(), inactiveSubscriber.getUserId());
        });

        logger.log(Level.SEVERE, "Successfully removed {0} subscriptions ...", inactiveSubscriptions.size());

        try {
            new BuilderBot().execute(
                    SendMessage.builder()
                            .chatId(userId)
                            .text("–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ " + inactiveSubscriptions.size() + " –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ ‚úÖ")
                            .build());
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
    }

    @Override
    public void deleteInactiveUsersBySchedule() {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É, —Ä–∞–Ω—å—à–µ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –ü–†–û–ë–ù–´–ï –ø–æ–¥–ø–∏—Å–∫–∏
        // (–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ - 1 –º–µ—Å—è—Ü)
        LocalDateTime beforeLocalDate = LocalDateTime
                .now()
                .minusMonths(1);

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        String beforeDate = beforeLocalDate.format(formatter);
        logger.log(Level.SEVERE, "Delete before date - {0}", beforeDate);

        // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
        // - –°—Ç–∞—Ç—É—Å Trial (–ø—Ä–æ–±–Ω–∞—è)
        // - –ù–µ —É–∫–∞–∑–∞–Ω email
        // - –ù–µ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        // - –î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –†–ê–ù–¨–®–ï, —á–µ–º "—Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –º–∏–Ω—É—Å 4 –º–µ—Å—è—Ü–∞".
        List<Subscriber> inactiveUsersForMoreThanFourMonths = this.subscriberOperations.getInactiveUsersForMoreThanFourMonths(beforeDate);

        // –ï—Å–ª–∏ —Ç–∞–∫–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ—Ç, —Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –º–µ—Ç–æ–¥–∞
        if (inactiveUsersForMoreThanFourMonths == null || inactiveUsersForMoreThanFourMonths.isEmpty()) {
            logger.log(Level.SEVERE, "inactiveUsersForMoreThanFourMonths is null or is empty, return ...");
            return;
        }

        logger.log(Level.SEVERE, "inactiveUsersForMoreThanFourMonths size = {0}", inactiveUsersForMoreThanFourMonths.size());

        // –ü—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–µ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
        // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ Redis –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏
        inactiveUsersForMoreThanFourMonths.forEach(inactiveSubscriber -> {
            logger.log(Level.SEVERE, "Delete inactive subscription - {0} ", new Gson().toJson(inactiveSubscriber));
            subscriberOperations.cancelInactiveTrialSubscription(inactiveSubscriber.getUserId(), inactiveSubscriber.getEquipmentType(), beforeDate);
            // –í Redis —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞ —Å–ø–µ—Ü–∏–µ—Ö–Ω–∏–∫–∏, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –ø–æ–ª—É—á–∞–ª –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
            redisEntity.remElement(inactiveSubscriber.getEquipmentType(), inactiveSubscriber.getUserId());
        });

        logger.log(Level.SEVERE, "Successfully removed {0} subscriptions ...", inactiveUsersForMoreThanFourMonths.size());
    }

    @Override
    public void sendRequestFeedbackAboutUnsubscribe(String chatId) {
        SendMessage sendMessage = SendMessage.builder()
                .chatId(chatId)
                .text("üöú –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—á–µ–º—É –í—ã —Ä–µ—à–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –º–Ω–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üôè")
                .replyMarkup(getFeedbackButton())
                .build();
        try {
            new BuilderBot().execute(sendMessage);
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
    }

    private InlineKeyboardMarkup getFeedbackButton() {
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> listOfListInlineKey = new ArrayList<>();
        List<InlineKeyboardButton> inlineKeyboardButtons = new ArrayList<>();
        InlineKeyboardButton inlineKeyboardButton = InlineKeyboardButton.builder()
                .text("–ù–∞–ø–∏—Å–∞—Ç—å ‚úçÔ∏è")
                .callbackData("write_feedback")
                .build();
        inlineKeyboardButtons.add(inlineKeyboardButton);
        listOfListInlineKey.add(inlineKeyboardButtons);
        inlineKeyboardMarkup.setKeyboard(listOfListInlineKey);

        return inlineKeyboardMarkup;
    }

    private InlineKeyboardMarkup getPriceButton() {
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> listOfListInlineKey = new ArrayList<>();
        List<InlineKeyboardButton> inlineKeyboardButtons = new ArrayList<>();
        InlineKeyboardButton inlineKeyboardButton = InlineKeyboardButton.builder()
                .text("–£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ üíµ")
                .callbackData("price")
                .build();
        inlineKeyboardButtons.add(inlineKeyboardButton);
        listOfListInlineKey.add(inlineKeyboardButtons);
        inlineKeyboardMarkup.setKeyboard(listOfListInlineKey);

        return inlineKeyboardMarkup;
    }

    private ReplyKeyboardMarkup getCancelFeedbackButton() {
        ReplyKeyboardMarkup replyKeyboardMarkup = new ReplyKeyboardMarkup();

        List<KeyboardRow> keyboardRowList = new ArrayList<>();
        KeyboardButton keyboardButton = KeyboardButton.builder()
                .text("–û—Ç–º–µ–Ω–∞ ‚ùå")
                .build();
        KeyboardRow keyboardRow = new KeyboardRow();
        keyboardRow.add(keyboardButton);
        keyboardRowList.add(keyboardRow);
        replyKeyboardMarkup.setKeyboard(keyboardRowList);
        replyKeyboardMarkup.setResizeKeyboard(true);

        return replyKeyboardMarkup;
    }

    private InlineKeyboardMarkup getShowMainMenuButton() {
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> listOfListInlineKey = new ArrayList<>();
        List<InlineKeyboardButton> inlineKeyboardButtons = new ArrayList<>();
        InlineKeyboardButton inlineKeyboardButton = new InlineKeyboardButton();
        inlineKeyboardButton.setText("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üéØ");
        inlineKeyboardButton.setCallbackData("main_menu");
        inlineKeyboardButtons.add(inlineKeyboardButton);
        listOfListInlineKey.add(inlineKeyboardButtons);
        inlineKeyboardMarkup.setKeyboard(listOfListInlineKey);
        return inlineKeyboardMarkup;
    }

    private InlineKeyboardMarkup getShowPhoneButton(boolean isActiveSubscr) {
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> listOfListInlineKey = new ArrayList<>();
        List<InlineKeyboardButton> inlineKeyboardButtons = new ArrayList<>();

        if (isActiveSubscr) {
            InlineKeyboardButton inlineKeyboardButton = new InlineKeyboardButton();
            inlineKeyboardButton.setText("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üéØ");
            inlineKeyboardButton.setCallbackData("main_menu");
            inlineKeyboardButtons.add(inlineKeyboardButton);
            listOfListInlineKey.add(inlineKeyboardButtons);
            inlineKeyboardMarkup.setKeyboard(listOfListInlineKey);
            return inlineKeyboardMarkup;
        }

        InlineKeyboardButton inlineKeyboardButton = new InlineKeyboardButton();
        inlineKeyboardButton.setText("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω üìû");
        inlineKeyboardButton.setCallbackData("show_phone");
        inlineKeyboardButtons.add(inlineKeyboardButton);
        listOfListInlineKey.add(inlineKeyboardButtons);

        inlineKeyboardButtons = new ArrayList<>();
        inlineKeyboardButton = new InlineKeyboardButton();
        inlineKeyboardButton.setText("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üéØ");
        inlineKeyboardButton.setCallbackData("main_menu");
        inlineKeyboardButtons.add(inlineKeyboardButton);
        listOfListInlineKey.add(inlineKeyboardButtons);

        inlineKeyboardMarkup.setKeyboard(listOfListInlineKey);

        return inlineKeyboardMarkup;
    }

    private InlineKeyboardMarkup getHeavyMachineryTypeButtons() {

        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> listOfListInlineKey = new ArrayList<>();

        // –ü–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î Firebase –≤—Å–µ –≤–∏–¥—ã —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏
        List<Document> heavyTypes = firebase.getAllHeavyMachineryName();
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏
        heavyTypes.sort(Comparator.comparing(object -> object.getFields().getName().getStringValue()));

        int count = 0;
        List<InlineKeyboardButton> inlineKeyboardButtons = new ArrayList<>();
        for (Document heavyType : heavyTypes) {
            // –ï—Å–ª–∏ index —ç–ª–µ–º–µ–Ω—Ç–∞ —á–µ—Ç–Ω—ã–π, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–∞—Ä—É –∫–Ω–æ–ø–æ–∫ –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫ –∏–∑ –¥–≤—É—Ö –∫–Ω–æ–ø–æ–∫
            if (count % 2 == 0) {
                listOfListInlineKey.add(inlineKeyboardButtons);
                inlineKeyboardButtons = new ArrayList<>();
            }

            InlineKeyboardButton inlineKeyboardButton = new InlineKeyboardButton();
            inlineKeyboardButton.setText(heavyType.getFields().getName().getStringValue());
            inlineKeyboardButton.setCallbackData(heavyType.getFields().getId().getStringValue());
            inlineKeyboardButtons.add(inlineKeyboardButton);

            // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–∞—Ä—É –∫–Ω–æ–ø–æ–∫
            if (count == heavyTypes.size() - 1) {
                listOfListInlineKey.add(inlineKeyboardButtons);
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis ID —Ç–∏–ø–æ–≤ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å callback.
            // –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –∫–Ω–æ–ø–∫–µ –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–∏–ø —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–µ–µ.
            redisEntity.pushElement("heavyMachineryIds", heavyType.getFields().getId().getStringValue());
            count++;
        }
        inlineKeyboardMarkup.setKeyboard(listOfListInlineKey);
        return inlineKeyboardMarkup;
    }

    private InlineKeyboardMarkup getAllActiveAndTrialSubscriptionButtons(List<Subscriber> subscriberList) {

        if (subscriberList == null)
            return null;

        // –ï—Å–ª–∏ –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –æ—Ç–º–µ–Ω–∏–ª–∏ –î–û –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, —Ç–æ –ù–ï –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —ç—Ç–æ–π —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–æ–π
        subscriberList.removeIf(subscriber ->
                subscriber.getStatus().equals("Active")
                        && !subscriber.isAutoPay());

        // –ü–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î Firebase –≤—Å–µ –≤–∏–¥—ã —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏
        List<Document> heavyTypes = firebase.getAllHeavyMachineryName();

        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º –∏ –∑–∞–¥–∞–µ–º –∏–º—è —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        for (Document heavyType : heavyTypes) {
            for (Subscriber subscr : subscriberList) {
                if (subscr.getEquipmentType().equals(heavyType.getFields().getId().getStringValue())) {
                    subscr.setEquipmentName(heavyType.getFields().getName().getStringValue());
                }
            }
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏
        subscriberList.sort(Comparator.comparing(Subscriber::getEquipmentName));

        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> listOfListInlineKey = new ArrayList<>();

        int count = 0;
        List<InlineKeyboardButton> inlineKeyboardButtons = new ArrayList<>();
        for (Subscriber subscriber : subscriberList) {
            // –ï—Å–ª–∏ index —ç–ª–µ–º–µ–Ω—Ç–∞ —á–µ—Ç–Ω—ã–π, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–∞—Ä—É –∫–Ω–æ–ø–æ–∫ –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫ –∏–∑ –¥–≤—É—Ö –∫–Ω–æ–ø–æ–∫
            if (count % 2 == 0) {
                listOfListInlineKey.add(inlineKeyboardButtons);
                inlineKeyboardButtons = new ArrayList<>();
            }

            InlineKeyboardButton inlineKeyboardButton = new InlineKeyboardButton();
            inlineKeyboardButton.setText(subscriber.getEquipmentName());
            inlineKeyboardButton.setCallbackData(subscriber.getEquipmentType().concat("_unsubscribe"));
            inlineKeyboardButtons.add(inlineKeyboardButton);

            // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–∞—Ä—É –∫–Ω–æ–ø–æ–∫
            if (count == subscriberList.size() - 1) {
                listOfListInlineKey.add(inlineKeyboardButtons);
            }
            count++;
        }
        inlineKeyboardMarkup.setKeyboard(listOfListInlineKey);
        return inlineKeyboardMarkup;
    }

    private ReplyKeyboardMarkup getCloseDialogButton() {
        return ReplyKeyboardMarkup.builder()
                .keyboardRow(new KeyboardRow(
                        Collections.singletonList(new KeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ ‚ùå"))))
                .resizeKeyboard(true)
                .build();
    }
}
