package ru.builder.bot;

import com.google.gson.Gson;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.builder.bean.admin.Admin;
import ru.builder.bean.general.General;
import ru.builder.bean.payment.Payment;
import ru.builder.bean.statistic.Statistic;
import ru.builder.redis.RedisEntity;

import javax.inject.Inject;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

// –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;


public class BuilderBot extends TelegramLongPollingBot {

    private final Logger logger = Logger.getLogger(this.getClass().getName());
    private final Pattern PATTERN = Pattern.compile("^(week|month|year|test)_\\d{1,2}$");
    private final String botName;
    private final String botToken;
    private General general;
    private Payment payment;
    private Admin admin;
    private Statistic statistic;
    private RedisEntity redisEntity;
    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ
    private LocalDateTime orderCreatedTime; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    private static final int EXPIRATION_HOURS = 6; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–∫–∞–∑ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–º


    public BuilderBot() {
        this.botName = System.getenv("builder_botName");
        this.botToken = System.getenv("builder_botToken");
    }

    @Inject
    public BuilderBot(General general, Payment payment, Admin admin, Statistic statistic, RedisEntity redisEntity) {
        this.redisEntity = redisEntity;
        this.botName = System.getenv("builder_botName");
        this.botToken = System.getenv("builder_botToken");
        this.general = general;
        this.payment = payment;
        this.admin = admin;
        this.statistic = statistic;
    }

    // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // (–ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞, –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    // (–ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥")
    // (–ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º")
    private void cleanUp(String userId) {
        redisEntity.deleteElement(userId.concat("_help"));
        redisEntity.deleteElement(userId.concat("_from_chatId"));
        redisEntity.deleteElement(userId.concat("_from_messageId"));
        redisEntity.deleteElement(userId.concat("_from_messageText"));
        redisEntity.deleteElement(userId.concat("_from_messageDate"));
        redisEntity.deleteElement(userId.concat("_from_messageAuthor"));
        redisEntity.deleteElement(userId.concat("_from_messageAuthorId"));
        redisEntity.deleteElement(userId.concat("_from_messageAuthorUsername"));
        redisEntity.deleteElement(userId.concat("_from_messageAuthorFirstName"));
        redisEntity.deleteElement(userId.concat("_from_messageAuthorLastName"));
        redisEntity.deleteElement(userId.concat("_from_messageAuthorLanguageCode"));
        redisEntity.deleteElement(userId.concat("_from_messageAuthorIsBot"));
        redisEntity.deleteElement(userId.concat("_from_messageAuthorCanJoinGroups"));
        redisEntity.deleteElement(userId.concat("_from_messageAuthorCanReadAllGroupMessages"));
        redisEntity.deleteElement(userId.concat("_from_messageAuthorSupportsInlineQueries"))
    @Override
    public void onUpdateReceived(Update update) {
        try {
            if (update != null) {

                Message message = update.getMessage();

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ —Å —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
                if (update.hasChannelPost() &&
                        update.getChannelPost() != null
                        && update.getChannelPost().getReplyToMessage() != null) {
                    admin.sendMessageFromChannel(update.getChannelPost());
                    return;
                }

                if (message != null) {

                    String userId = String.valueOf(message.getFrom().getId());

                    boolean isAdmin = redisEntity.getElement(userId.concat("_isAdmin")) != null
                            && !redisEntity.getElement(userId.concat("_isAdmin")).isEmpty()
                            && redisEntity.getElement(userId.concat("_isAdmin")).equals("true");

                    if (message.getText() != null) {
                        if (message.getText().equals("/start")) {
                            cleanUp(userId);
                            // –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–∂–æ–∫ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º id –∫–∞–Ω–∞–ª–∞, –∫—É–¥–∞ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–ª–µ—Ç–µ—Ç—å —Ñ–∏–¥–±–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            redisEntity.deleteElement(userId.concat("_from_chatId"));
                            if (!general.checkSubscriberIsAlreadyExist(userId))
                                // –°–æ—Ö—Ä–∞–Ω–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                                redisEntity.pushElement("new_users", userId);
                            general.sendStartMessage(userId);
                        } else if (message.getText().equals("/start refyandex")) {
                            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏–∑ –Ø–Ω–¥–µ–∫—Å–∞
                            cleanUp(userId);
                            // –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–∂–æ–∫ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º id –∫–∞–Ω–∞–ª–∞, –∫—É–¥–∞ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–ª–µ—Ç–µ—Ç—å —Ñ–∏–¥–±–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            redisEntity.deleteElement(userId.concat("_from_chatId"));
                            if (!general.checkSubscriberIsAlreadyExist(userId)) {
                                // –°–æ—Ö—Ä–∞–Ω–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –Ø–Ω–¥–µ–∫—Å—É
                                redisEntity.pushElement("new_users_yandex", userId);
                                // –°–æ—Ö—Ä–∞–Ω–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –Ø–Ω–¥–µ–∫—Å—É (–∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å)
                                redisEntity.pushElement("new_users_yandex_today", userId);
                                // –°–æ—Ö—Ä–∞–Ω–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                                redisEntity.pushElement("new_users", userId);
                            }
                            general.sendStartMessage(userId);
                        } else if (message.getText().equals("/deleteInactive") && isAdmin) {
                            // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –î–û 17 –∏—é–Ω—è + —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ Redis
                            this.general.deleteInactiveUsersByAdmin(userId);
                            return;
                        } else if (message.getText().equals("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üéØ")) {
                            cleanUp(userId);
                            this.general.sendMainMenuMessage(userId);
                            return;
                        } else if (redisEntity.getElement(userId.concat("_from_chatId")) != null
                                && !message.getText().equals("–í—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É üöú")
                                && !message.getText().equals("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ üì¨")
                                && !message.getText().equals("–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º ‚úèÔ∏è")
                                && !message.getText().equals("–ü–æ–º–æ—â—å ‚ÑπÔ∏èÔ∏è")
                                && !message.getText().equals("–ó–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ ‚ùå")
                                && !message.getText().equals("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üéØ")
                        ) {
                            admin.sendFeedbackMessageToTechChannel(message);
                            admin.sendFinalMessage(userId);
                            redisEntity.deleteElement(userId.concat("_from_chatId"));
                            return;
                        } else if (
                                ((redisEntity.getElement(userId.concat("_help")) != null && redisEntity.getElement(userId.concat("_help")).equals("true"))
                                        || redisEntity.getElement(userId.concat("_from_chatId")) != null)
                                        && message.getText().equals("–ó–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ ‚ùå")) {
                            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –¥–∏–∞–ª–æ–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
                            this.admin.cancelingDialog(userId);
                            redisEntity.deleteElement(userId.concat("_from_chatId"));
                            redisEntity.deleteElement(userId.concat("_help"));
                            return;
                        } else if (redisEntity.getElement(userId.concat("_help")) != null
                                && redisEntity.getElement(userId.concat("_help")).equals("true")
                                && !message.getText().equals("–í—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É üöú")
                                && !message.getText().equals("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ üì¨")
                                && !message.getText().equals("–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º ‚úèÔ∏è")
                                && !message.getText().equals("–ü–æ–º–æ—â—å ‚ÑπÔ∏èÔ∏è")
                                && !message.getText().equals("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üéØÔ∏è")
                        ) {
                            admin.sendFeedbackMessageToTechChannel(message);
                            admin.sendFinalMessage(userId);
                            return;
                        } else if (redisEntity.getElement(userId.concat("_email")) != null
                                && redisEntity.getElement(userId.concat("_email")).equals("true")) {
                            general.saveEmail(userId, message.getText());
                            // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            payment.createPayment(userId);
                        }
                        // –†–∞–±–æ—Ç–∞ —Å —Ñ–∏–¥–±–µ–∫–æ–º –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                        else if (redisEntity.getElement(userId.concat("_feedback")) != null
                                && redisEntity.getElement(userId.concat("_feedback")).equals("true")
                                && !message.getText().equals("–û—Ç–º–µ–Ω–∞ ‚ùå")) {
                            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–¥–±–µ–∫ –≤ –∫–∞–Ω–∞–ª —Å —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
                            this.admin.sendFeedbackMessageToTechChannel(message);
                            this.general.sendThanksToUserForHisFeedback(userId);
                        } else if (redisEntity.getElement(userId.concat("_feedback")) != null
                                && redisEntity.getElement(userId.concat("_feedback")).equals("true")
                                && message.getText().equals("–û—Ç–º–µ–Ω–∞ ‚ùå")) {
                            this.general.cancelFeedback(userId);
                        } else {
                            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Ç–µ—Ä—è–ª—Å—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–æ—Ç—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            logger.log(Level.SEVERE, "Message for lost users ...");
                            general.sendLostUserMessage(userId);
                        }
                    }
                    return;
                }

                // –õ–æ–≤–∏–º callback
                if (update.hasCallbackQuery()) {
                    CallbackQuery callbackQuery = update.getCallbackQuery();
                    Message callbackMessage = callbackQuery.getMessage();
                    logger.log(Level.INFO, "callbackQuery - {0}", new Gson().toJson(callbackQuery));
                    logger.log(Level.SEVERE, "callbackQuery data - {0}", callbackQuery.getData());

                    String callBackData = callbackQuery.getData();
                    String callBackQueryId = callbackQuery.getId();
                    String userId = String.valueOf(callbackMessage.getChat().getId());
                    Integer messageId = callbackMessage.getMessageId();
                    String text = callbackMessage.getText();
                    Matcher matcher = PATTERN.matcher(callBackData);

                    //  –†–∞–±–æ—Ç–∞ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
                    if (callBackData.equals("choose_machine")) {
                        cleanUp(userId);
                        general.getChoiceHeavyMachineryTypes(userId);
                        this.sendAnswerCallbackQuery(callBackQueryId);
                        return;
                    } else if (callBackData.equals("sub_management")) {
                        cleanUp(userId);
                        general.getAllActiveAndTrialSubscriptionsForUser(userId);
                    } else if (callBackData.equals("support")) {
                        cleanUp(userId);
                        // –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–∂–æ–∫ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º id –∫–∞–Ω–∞–ª–∞, –∫—É–¥–∞ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–ª–µ—Ç–µ—Ç—å —Ñ–∏–¥–±–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        redisEntity.deleteElement(userId.concat("_from_chatId"));
                        general.requestProblem(userId);
                        this.sendAnswerCallbackQuery(callBackQueryId);
                        return;
                    } else if (callBackData.equals("help")) {
                        cleanUp(userId);
                        general.getHelpInfo(userId);
                        this.sendAnswerCallbackQuery(callBackQueryId);
                        return;
                    } else if (callBackData.equals("statistic")) {
                        boolean isAdmin = redisEntity.getElement(userId.concat("_isAdmin")) != null
                                && !redisEntity.getElement(userId.concat("_isAdmin")).isEmpty()
                                && redisEntity.getElement(userId.concat("_isAdmin")).equals("true");
                        if (!isAdmin) {
                            this.sendAnswerCallbackQuery(callBackQueryId);
                            return;
                        }
                        cleanUp(userId);
                        statistic.sendStatisticMessage(userId);
                        this.sendAnswerCallbackQuery(callBackQueryId);
                        return;
                    }
                    // –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ–π—á–∞—Å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 6 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
                    // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ, —Ç–æ –≤—ã–≤–æ–¥–∏ —á—Ç–æ –∑–∞–∫–∞–∑ –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω
                    else if (callBackData.equals("show_phone")) {
                        if (text == null || text.isEmpty()) {
                            logger.log(Level.SEVERE, "Text for messageId - {0} is null! Don't show the phone...", messageId);
                            return;
                        }
                        
                        LocalDateTime expirationTime = orderCreatedTime.plusHours(EXPIRATION_HOURS); // –î–æ–±–∞–≤–ª—è–µ–º EXPIRATION_HOURS —á–∞—Å–æ–≤ –∫ –º–æ–º–µ–Ω—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
                        LocalDateTime currentTime = LocalDateTime.now(); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                    
                        if (currentTime.isAfter(expirationTime)) {
                            // –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ –∏—Å—Ç–µ–∫–ª–æ, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω
                            logger.log(Level.INFO, "–ó–∞–∫–∞–∑ —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω.");
                            return;
                        }
                    
                        general.showPhoneNumber(userId, messageId, text);
                    }

                    // –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–æ–∫
                    else if (callBackData.equals("price")) {
                        this.general.getPriceInfo(userId);
                    }
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º callBackData –ø–æ —Å–ø–∏—Å–∫—É —Ç–∏–ø–æ–≤ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏ –≤ Redis
                    else if (redisEntity.getElements("heavyMachineryIds") != null
                            && redisEntity.getElements("heavyMachineryIds").contains(callBackData)) {

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ–π—á–∞—Å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ
                        if (general.checkAutoPaySubscription(userId, callBackData)) {
                            general.sendHaveAutoPayment(userId, callBackData);
                            this.sendAnswerCallbackQuery(callBackQueryId);
                            return;
                        }

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ë–î
                        if (general.checkSubscriptionForUserId(userId, callBackData)) {
                            this.sendAnswerCallbackQuery(callBackQueryId);
                            return;
                        }
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–µ
                        redisEntity.pushElement(callBackData, userId);
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∏–Ω—Ñ—É –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫—É: userId, —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ + –∫–æ–ª-–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–æ–Ω–Ω–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏
                        general.addSubscriberInfo(userId, callBackData);
                        // –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        general.sendMessageAboutChoice(userId, callBackData);
                    } else if (matcher.matches()) {
                        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–∞—Ä–∏—Ñ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–µ–¥–µ–ª—è/–º–µ—Å—è—Ü/–≥–æ–¥)
                        // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                        String equipmentType = callBackData.substring(callBackData.indexOf('_') + 1);
                        String subscriptionType = callBackData.substring(0, callBackData.indexOf('_'));

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ–π—á–∞—Å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ
                        if (general.checkAutoPaySubscription(userId, equipmentType)) {
                            general.sendHaveAutoPayment(userId, equipmentType);
                            this.sendAnswerCallbackQuery(callBackQueryId);
                            return;
                        }

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—É—é —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É
                        if (general.checkActiveSubscription(userId, equipmentType)) {
                            general.sendAlreadyHaveSubscription(userId, equipmentType);
                            this.sendAnswerCallbackQuery(callBackQueryId);
                            return;
                        }

                        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç—Ä–∏–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —Å 0 –∫–æ–Ω–Ω–µ–∫—Ç–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏.
                        // –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ—Ñ–æ—Ä–º–ª—è—Ç—å –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
                        if (!general.checkTrialSubscription(userId, equipmentType)) {
                            general.sendDontHaveTrialSubscription(userId, equipmentType);
                            this.sendAnswerCallbackQuery(callBackQueryId);
                            return;
                        }

                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Ç–∏–ø —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏
                        redisEntity.hashSet(userId, "equipmentType", equipmentType);
                        redisEntity.hashSet(userId, "subscriptionType", subscriptionType);
                        // –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–∂–æ–∫ "_from_chatId" —Å —É–∫–∞–∑–∞–Ω–∏–µ–º id –∫–∞–Ω–∞–ª–∞, –∫—É–¥–∞ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–ª–µ—Ç–µ—Ç—å —Ñ–∏–¥–±–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
                        // —á—Ç–æ–±—ã –≤–≤–µ–¥–µ–Ω–Ω—ã–π email –Ω–µ —É–ª–µ—Ç–µ–ª –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
                        // + –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º —Ñ–ª–∞–∂–∫–∏, –∫–∞—Å–∞—é—â–∏–µ—Å—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                        redisEntity.deleteElement(userId.concat("_from_chatId"));
                        redisEntity.deleteElement(userId.concat("_help"));
                        redisEntity.deleteElement(userId.concat("_feedback"));
                        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫
                        redisEntity.setElement(userId.concat("_email"), "true");
                        general.sendRequestEmail(userId);
                    } else if (callBackData.contains("_unsubscribe")) {
                        String equipmentType = callBackData.substring(0, callBackData.indexOf('_'));
                        general.unsubscribe(userId, equipmentType, messageId);
                    } else if (callBackData.equals("main_menu")) {
                        cleanUp(userId);
                        general.sendMainMenuMessage(userId);
                    }
                    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    else if (callBackData.equals("count_of_trial_subscr")) {
                        statistic.getCountOfSubscriptionsForEachUser(userId, "Trial", messageId);
                    } else if (callBackData.equals("count_of_paid_subscr")) {
                        statistic.getCountOfSubscriptionsForEachUser(userId, "Active", messageId);
                    } else if (callBackData.equals("count_of_trial_subscr_by_equipment")) {
                        statistic.getCountOfSubscriptionsForEachEquipment(userId, "Trial", messageId);
                    } else if (callBackData.equals("count_of_paid_subscr_by_equipment")) {
                        statistic.getCountOfSubscriptionsForEachEquipment(userId, "Active", messageId);
                    } else if (callBackData.equals("count_and_duration_of_paid_subscr_by_equipment")) {
                        statistic.getCountAndDurationOfPaidSubscriptionsForEachEquipment(userId, messageId);
                    } else if (callBackData.equals("count_of_new_user_by_day")) {
                        statistic.getCountOfNewBotUsers(userId, messageId);
                    } else if (callBackData.equals("count_of_user")) {
                        statistic.getCountOfBotUsers(userId, messageId);
                    } else if (callBackData.equals("back_to_main_menu")) {
                        statistic.sendStatisticMessage(userId, messageId);
                    } else if (callBackData.equals("count_of_ya_user")) {
                        statistic.getCountOfYaUsers(userId, messageId);
                    }
                    // –§–∏–¥–±–µ–∫ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏
                    else if (callBackData.equals("write_feedback")) {
                        this.cleanUp(userId);
                        this.general.feedbackRequest(userId);
                    }
                    this.sendAnswerCallbackQuery(callBackQueryId);
                }
            }
        } catch (Exception e) {
            logger.log(Level.SEVERE, null, e);
        }
    }

    private void cleanUp(String chatId) {
        redisEntity.deleteElement(chatId.concat("_subscription"));
        redisEntity.deleteElement(chatId.concat("_email"));
        redisEntity.deleteElement(chatId.concat("_help"));
        redisEntity.deleteElement(chatId.concat("_feedback"));
    }

    private void sendAnswerCallbackQuery(String callBackQueryId) {
        // –ß–µ—Ä–µ–∑ answerCallbackQuery —É–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ
        try {
            execute(AnswerCallbackQuery.builder()
                    .callbackQueryId(callBackQueryId)
                    .build());
        } catch (TelegramApiException e) {
            logger.log(Level.SEVERE, null, e);
        }
    }

    @Override
    public String getBotUsername() {
        return botName;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }
}
